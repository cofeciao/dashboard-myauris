<?php

namespace common\commands;

use common\helpers\MyHelper;
use tpmanc\imagick\Imagick;
use trntv\bus\interfaces\SelfHandlingCommand;
use yii\base\BaseObject;

class ImagickCommand extends BaseObject implements SelfHandlingCommand
{
    public $image = null;
    public $path = '@frontend/web/uploads/';
    public $width = false;
    public $height = false;
    public $fileName = null;
    public $thumbnails = [
        /*
         * path => '@frontend/web/uploads/thumbs/',
         * width => false,
         * height => false
         * fileName => null
         * suffixFileName => null
         * */
    ];
    private $imageName = null;
    private $time = null;
    private $imageExtension = null;
    private $imageRandomString = null;
    private $infoImage = [];

    private $handleImage = [];
    private $handleThumbnails = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->time = time();
        $this->imageRandomString = MyHelper::randomStringLowercase();
        if (file_exists($this->image)) {
            $this->infoImage = @pathinfo($this->image);
            if ($this->fileName == null && count($this->infoImage) > 0) {
                $this->imageName = MyHelper::createAlias($this->infoImage['filename']);
                $this->imageExtension = $this->infoImage['extension'];
                $this->fileName = $this->imageName . '-' . $this->imageRandomString . '-' . $this->time . '.' . $this->imageExtension;
            }
        }
    }

    public function handle($command)
    {
        if (!file_exists($command->image)) return false;
        if(!is_dir(\Yii::getAlias($command->path))){
            mkdir(\Yii::getAlias($command->path), 0755, true);
        }
        $this->handleImage($command->image, $command->path, $command->width, $command->height, $this->fileName);
        if (is_array($command->thumbnails)) {
            $variables = ['path', 'width', 'height', 'fileName'];
            foreach ($command->thumbnails as $thumbnail) {
//                if (!is_array($thumbnail) || count($thumbnail) <= 0) continue;
                /* @var $image null */
                /* @var $path '@frontend/web/uploads/' */
                /* @var $width false */
                /* @var $height false */
                /* @var $fileName null */
                /* @var $suffixFileName null */
                foreach ($variables as $variable) {
                    $$variable = isset($thumbnail[$variable]) ? $thumbnail[$variable] : (property_exists(self::class, $variable) ? $this->$variable : null);
                }
                $suffixFileName = isset($thumbnail['suffixFileName']) ? $thumbnail['suffixFileName'] : null;
                if ($fileName == $this->fileName && $suffixFileName != null) $fileName = $this->imageName . $suffixFileName . '-' . $this->imageRandomString . '-' . $this->time . '.' . $this->imageExtension;
                if (!is_dir(\Yii::getAlias($path))) $path = $command->path;
                $this->handleImage($command->image, $path, $width, $height, $fileName, true);
            }
        }
        return [
            'image' => $command->handleImage,
            'thumbnails' => $command->handleThumbnails
        ];
    }

    private function handleImage($image = null, $path = null, $width = false, $height = false, $fileName = null, $thumb = false)
    {
        if (!is_dir(\Yii::getAlias($path))) {
            if ($thumb == false) $this->handleThumbnails[] = null;
            else $this->handleImage = null;
            return false;
        }
        $open_image = Imagick::open(\Yii::getAlias($image));
        list($positionX, $positionY, $positionWidth, $positionHeight) = $this->handlePositionImage($open_image->getWidth(), $open_image->getHeight(), $width, $height);
        $return = true;
        try {
            $open_image->crop($positionX, $positionY, $positionWidth, $positionHeight);
            if (!in_array($width, [null, false]) || !in_array($height, [null, false])) $open_image->resize($width, $height);
            $open_image->saveTo(\Yii::getAlias($path) . $fileName);
            $dataHandle = [
                'code' => 'success',
                'path' => $path,
                'fileName' => $fileName,
                'extension' => $this->imageExtension
            ];
        } catch (\ImagickException $ex) {
            $dataHandle = [
                'code' => 'error',
                'error' => $ex
            ];
            $return = false;
        }
        if ($thumb == false) {
            $this->handleImage = $dataHandle;
        } else {
            $this->handleThumbnails[] = $dataHandle;
        }
        return $return;
    }

    protected function handlePositionImage($witdhImage, $heightImage, $width = null, $height = null)
    {
        $positionX = 0;
        $positionY = 0;
        $positionWidth = $witdhImage;
        $positionHeight = $heightImage;
        if ($width != null || $height != null) {
            if ($width != null && $height != null && $width < $witdhImage && $height < $heightImage) {
                if ($witdhImage / $width > $heightImage / $height) {
                    $positionX = ($witdhImage - ($width * $heightImage / $height)) / 2;
                    $positionY = 0;
                    $positionWidth = $width * $heightImage / $height;
                    $positionHeight = $heightImage;
                } else {
                    $positionX = 0;
                    $positionY = ($heightImage - ($height * $witdhImage / $width)) / 2;
                    $positionWidth = $witdhImage;
                    $positionHeight = $height * $witdhImage / $width;
                }
            } else {
                if ($width != null && $width < $witdhImage) {
                    $positionWidth = $width;
                    $positionX = ($witdhImage - $width) / 2;
                }
                if ($height != null && $height < $heightImage) {
                    $positionHeight = $height;
                    $positionY = ($heightImage - $height) / 2;
                }
            }
        }
        return [$positionX, $positionY, $positionWidth, $positionHeight];
    }
}

<?php

namespace common\models;

use trntv\filekit\behaviors\UploadBehavior;
use Yii;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "user_profile".
 *
 * @property integer $user_id
 * @property integer $locale
 * @property string $fullname
 * @property string $nickname
 * @property string $about
 * @property string $city
 * @property string $address
 * @property string $phone
 * @property string $id_pancake
 * @property string $facebook
 * @property string $picture
 * @property string $avatar
 * @property string $cover
 * @property integer $gender
 *
 * @property User $user
 */
class UserProfile extends ActiveRecord
{
    const GENDER_MALE = 1;
    const GENDER_FEMALE = 2;
    const GENDER_OTHER = 3;

    const SCENARIO_PANCAKE = 'req_pancake';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user_profile}}';
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'phone'], 'required'],
            [['id_pancake'], 'filter', 'filter' => 'trim'],
            [['id_pancake'], 'required', 'message' => 'Vui lòng lấy ID PanCake của mình.', 'on' => self::SCENARIO_PANCAKE],
            [['user_id', 'gender'], 'integer'],
            [['gender'], 'in', 'range' => [null, self::GENDER_FEMALE, self::GENDER_MALE]],
            [['fullname', 'nickname', 'address', 'city', 'avatar', 'cover', 'label_pancake'], 'string', 'max' => 255],
            [['facebook'], 'string', 'max' => 50],
            [['bithday', 'id_pancake'], 'string', 'max' => 25],
            [['phone'], 'string', 'max' => 25, 'whenClient' => 'function(attribute, value){
                if(value.trim() != "") $(".row-phone .authenticate").slideDown();
                else $(".row-phone .authenticate").slideUp();
            }'],
            [['about'], 'string'],
            [['avatar', 'cover'], 'string', 'max' => 255],
            ['locale', 'default', 'value' => Yii::$app->language],
            ['locale', 'in', 'range' => array_keys(Yii::$app->params['availableLocales'])],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'user_id' => Yii::t('common', 'User ID'),
            'fullname' => Yii::t('common', 'Họ tên'),
            'nickname' => Yii::t('common', 'Biệt danh'),
            'bithday' => Yii::t('common', 'Ngày sinh'),
            'phone' => Yii::t('backend', 'Phone'),
            'facebook' => Yii::t('backend', 'Facebook'),
            'city' => Yii::t('backend', 'City'),
            'address' => Yii::t('backend', 'Address'),
            'about' => Yii::t('backend', 'About me'),
            'avatar' => Yii::t('backend', 'Avatar'),
            'locale' => Yii::t('common', 'Locale'),
            'picture' => Yii::t('common', 'Picture'),
            'gender' => Yii::t('common', 'Gender'),
            'id_pancake' => 'ID Pancake',
        ];
    }

    public function afterDelete()
    {
        $id = $this->primaryKey;
        $cache = Yii::$app->cache;
        $key1 = 'get-avatar-user-profile-' . $id;
        $cache->delete($key1);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $id = $this->primaryKey;
        $cache = Yii::$app->cache;
        $key1 = 'get-avatar-user-profile-' . $id;
        $cache->delete($key1);

        $key = 'get-user-created-by-or-update-by-' . $id;
        $cache->delete($key);

        $key2 = 'get-full-name-bac-si-user-profile-' . $id;
        $cache->delete($key2);

        $key3 = 'get-full-name-direct-sale-user-profile-' . $id;
        $cache->delete($key3);


        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    public static function getUserCreatedOrUpdateBy($id)
    {
        if ($id == null) {
            return false;
        }

        $cache = Yii::$app->cache;
        $key = 'get-user-created-by-or-update-by-' . $id;

        $user = $cache->get($key);

        if ($user == false) {
            $user = UserProfile::find()->where(['user_id' => $id])->one();
            $cache->set($key, $user, 30 * 24 * 3600);
        }
        return $user;
    }


    /**
     * @return null|string
     */
    public static function getFullName($idUser = null)
    {
        if ($idUser == null) {
            $useProfile = self::getUserProfile(Yii::$app->user->id);
        } else {
            $useProfile = self::getUserProfile($idUser);
        }
        if ($useProfile) {
            return $useProfile->fullname;
        }
        return '';
    }

    public static function getFullNameBacSi($idUser)
    {
        $cache = Yii::$app->cache;
        $key = 'get-full-name-bac-si-user-profile-' . $idUser;

        $useProfileName = $cache->get($key);

        if ($useProfileName == false) {
            $useProfileName = UserProfile::findOne($idUser);
            $cache->set($key, $useProfileName, 7 * 24 * 3600);
        }
        if ($useProfileName) {
            return $useProfileName->fullname;
        }
        return null;
    }

    public static function getFullNameDirectSale($idUser)
    {
        $cache = Yii::$app->cache;
        $key = 'get-full-name-direct-sale-user-profile-' . $idUser;

        $useProfileName = $cache->get($key);

        if ($useProfileName == false) {
            $useProfile = UserProfile::findOne($idUser);
            if ($useProfile) {
                $useProfileName = $useProfile->fullname;
            } else {
                $useProfileName = null;
            }
            $cache->set($key, $useProfileName);
        }

        return $useProfileName;
    }

    public static function getFullNameChayAds($idUser)
    {
        $useProfile = self::getUserProfile($idUser);
        if ($useProfile) {
            return $useProfile->fullname;
        }
        return null;
    }

    public static function getAvatar($size = '200x200')
    {
        $useProfile = self::getUserProfile(Yii::$app->user->id);
        if ($useProfile != null && $useProfile->avatar != null && file_exists(Yii::$app->basePath . '/web/uploads/user/avatar/' . $size . '/' . $useProfile->avatar)) {
            return Yii::getAlias('@frontendUrl') . '/uploads/user/avatar/' . $size . '/' . $useProfile->avatar;
        } else {
            return Yii::getAlias('@frontendUrl') . '/images/default/avatar-default.png';
        }
    }

    public static function getCover()
    {
        $useProfile = self::getUserProfile(Yii::$app->user->id);
        if ($useProfile != null && $useProfile->cover != null && file_exists(Yii::$app->basePath . '/web/uploads/user/cover/' . $useProfile->cover)) {
            return Yii::getAlias('@frontendUrl') . '/uploads/user/cover/' . $useProfile->cover;
        } else {
            return Yii::getAlias('@frontendUrl') . '/images/default/background-login-default.jpg';
        }
    }

    public static function getPhone($idUser)
    {
        $userProfile = self::getUserProfile($idUser);
        if ($userProfile == null) {
            return null;
        }
        return $userProfile->phone;
    }

    public static function savePancakeLable($user_id, $label_pancake)
    {
        $user = self::getUserProfile($user_id);
        if ($user) {
            $user->label_pancake = $label_pancake;
            $user->save(false);
            return true;
        }
        return false;
    }

    public function getLabel_pancake()
    {
        return ($this->label_pancake) ? $this->label_pancake : "";
    }

    public function getListHasLabelPancake()
    {
        $command = \Yii::$app->db->createCommand(" SELECT user_id, label_pancake FROM user_profile ,user 
            where user_profile.user_id = user.id
            AND user.status = 2 
            AND label_pancake IS NOT NULL ");

        $data = $command->queryAll();
        if (empty($data)) {
            return [];
        }
        $result = [];
        foreach ($data as $item) {
            $result[$item['user_id']] = $item['user_id'];
        }
        return $result;
    }

    protected static function getUserProfile($id)
    {
        $cache = Yii::$app->cache;
        $key = 'get-avatar-user-profile-' . $id;

        $useProfile = $cache->get($key);
        if ($useProfile == false) {
            $useProfile = UserProfile::findOne($id);
            $cache->set($key, $useProfile, 30 * 86400);
        }
        return $useProfile;
    }
}

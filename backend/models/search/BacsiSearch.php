<?php
/**
 * Created by PhpStorm.
 * User: Nguyen Tran
 * Date: 06-04-2019
 * Time: 11:01 AM
 */

namespace backend\models\search;

use backend\models\phongkham\BacsiModel;
use backend\modules\clinic\models\Clinic;
use backend\modules\user\models\User;
use yii\base\Model;
use yii\data\ActiveDataProvider;

class BacsiSearch extends BacsiModel
{
    const DA_DEN = 1;

    public $button = '';
    public $from;
    public $to;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['button', 'from', 'to'], 'string'],
            [['customer_huong_dieu_tri', 'customer_ghichu_bacsi'], 'string', 'max' => 255],
            [['district', 'co_so', 'permission_user'], 'integer'],
            [['name', 'phone', 'customer_code', 'sex', 'birthday', 'time_lichhen', 'full_name'], 'safe'],
        ];
    }

    public function scenarios()
    {
        return Model::scenarios();
    }

    public function search($params)
    {
        $user = new User();
        $roleUser = $user->getRoleName(\Yii::$app->user->id);

        $query = Clinic::find()->where(['dep365_customer_online.status' => Clinic::STATUS_DH, 'dep365_customer_online.dat_hen' => self::DA_DEN]);

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => ['defaultOrder' => ['id' => SORT_DESC]]
        ]);

        $this->load($params);

        if ($this->button == '') {
            $this->from = date('d-m-Y');
            $this->to = date('d-m-Y');
        }

        $query->joinWith(['provinceHasOne']);

        if (!$this->validate()) {
            return $dataProvider;
        }

        $query->andFilterWhere([
            'co_so' => $this->co_so,
//            'phone' => $this->phone,
        ]);

        $query->andFilterWhere(['like', 'full_name', $this->full_name]);
        $query->andFilterWhere(['like', 'customer_code', $this->customer_code]);
        if (isset($this->from) && isset($this->to) && $this->from != null && $this->to != null) {
            $from = strtotime($this->from);
            $to = strtotime($this->to) + 86399;
//            $query->andFilterWhere(['between', 'customer_come', $from, $to]);
            $query->andFilterWhere(['>', 'customer_come', $from]);
            $query->andFilterWhere(['<', 'customer_come', $to]);
        }

        return $dataProvider;
    }
}

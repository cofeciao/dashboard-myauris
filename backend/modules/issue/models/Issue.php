<?php

namespace backend\modules\issue\models;

use backend\modules\user\models\PhongBan;
use backend\modules\user\models\User;
use Codeception\Actor;
use cornernote\linkall\LinkAllBehavior;
use Yii;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\db\ActiveRecord;
use common\models\UserProfile;
use backend\modules\issue\models\query\IssueQuery;

/**
 * This is the model class for table "issue".
 *
 * @property int $id
 * @property string $name
 * @property string $description
 * @property int $level Độ quan trọng
 * @property int $end_date_expected Thời gian dự kiến giải quyết xong vấn đề
 * @property int $end_date Ngày giải quyết xong vấn đề
 * @property int $status 0 - Chưa giải quyết, 1 - Đã giải quyết
 * @property int $created_at
 * @property int $created_by
 * @property int $updated_at
 * @property int $updated_by
 */
class Issue extends \yii\db\ActiveRecord
{
    const STATUS_DISABLED = 0;
    const STATUS_PUBLISHED = 1;

    const LEVEL_NORMAL = 0;
    const LEVEL_WARNING = 1;
    const LEVEL_DANGER = 2;
    const LEVEL = [
        self::LEVEL_NORMAL => 'Không quan trọng',
        self::LEVEL_WARNING => 'Quan trọng',
        self::LEVEL_DANGER => 'Nguy hiểm',
    ];

    public $phong_ban;
    public $user;
    public $parts;

    public static function tableName()
    {
        return 'issue';
    }

    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::class,
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => 'updated_by',
            ],
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'preserveNonEmptyValues' => true,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
            [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['end_date_expected'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['end_date_expected']
                ],
                'value' => function () {
                    if ($this->end_date_expected == null) return null;
                    return strtotime($this->end_date_expected);
                }
            ],
            LinkAllBehavior::class
        ];
    }

    public static function find()
    {
        return new IssueQuery(get_called_class());
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['description'], 'string'],
            [['level', 'status'], 'integer'],
            [['end_date_expected'], 'safe'],
            [['name'], 'string', 'max' => 255],
            [['phong_ban', 'user', 'parts'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('backend', 'ID'),
            'name' => Yii::t('backend', 'Name'),
            'description' => Yii::t('backend', 'Description'),
            'level' => Yii::t('backend', 'Level'),
            'end_date_expected' => Yii::t('backend', 'End Date Expected'),
            'end_date' => Yii::t('backend', 'End Date'),
            'status' => Yii::t('backend', 'Status'),
            'created_at' => Yii::t('backend', 'Created At'),
            'created_by' => Yii::t('backend', 'Created By'),
            'updated_at' => Yii::t('backend', 'Updated At'),
            'updated_by' => Yii::t('backend', 'Updated By'),
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        if (is_array($this->parts)) {
            $phong_bans = [];
            $users = [];
            foreach ($this->parts as $part) {
                if (strpos($part, 'user-')) {
                    $user = PhongBan::getById(str_replace('user-', '', 'part'));
                    if ($user != null) {
                        $users[] = $user;
                    }
                } else if (strpos($part, 'phong-ban-')) {
                    $phong_ban = PhongBan::getById(str_replace('phong-ban-', '', $part));
                    if ($phong_ban != null) {
                        $phong_bans[] = $phong_ban;
                    }
                }
            }
        }
        $this->linkAll('userHasMany', $users);
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function getPhongBanHasMany()
    {
        return $this->hasMany(PhongBan::class, ['id' => 'phong_ban_id'])
            ->viaTable('issue_phong_ban_hasmany', ['id' => 'issue_id']);
    }

    public function getUserHasMany()
    {
        return $this->hasMany(User::class, ['id' => 'user_id'])
            ->viaTable('issue_user_hasmany', ['id' => 'issue_id']);
    }

    public function getUserCreatedBy($id)
    {
        if ($id == null)
            return null;
        $user = UserProfile::find()->where(['user_id' => $id])->one();
        return $user;
    }

    public function getUserUpdatedBy($id)
    {
        if ($id == null)
            return null;
        $user = UserProfile::find()->where(['user_id' => $id])->one();
        return $user;
    }

}

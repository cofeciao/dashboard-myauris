<?php

namespace backend\modules\affiliate\models;

use backend\modules\customer\models\Dep365CustomerOnline;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\db\ActiveRecord;
use common\models\UserProfile;

class AffiliateCustomerContact extends \yii\db\ActiveRecord
{
    const SCENARIO_AFFILIATE_CONTACT = 'affiliate-contact';
    const SCENARIO_MYAURIS_APP = 'myauris-app';
    const STATUS_DISABLED = 0;
    const STATUS_PUBLISHED = 1;
    public $customer;

    public static function tableName()
    {
        return 'affiliate_customer_contact';
    }

    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::class,
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => 'updated_by',
            ],
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'preserveNonEmptyValues' => true,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
        ];
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'email'], 'required', 'on' => self::SCENARIO_AFFILIATE_CONTACT],
            [['name', 'email', 'customer_code'], 'string', 'max' => 255, 'on' => [self::SCENARIO_AFFILIATE_CONTACT, self::SCENARIO_MYAURIS_APP]],
            [['note'], 'string', 'on' => [self::SCENARIO_AFFILIATE_CONTACT, self::SCENARIO_MYAURIS_APP]],
            [['status', 'created_by', 'updated_by', 'created_at', 'updated_at'], 'integer'],
            [['phone', 'page'], 'required'],
            [['phone', 'page'], 'string', 'max' => 255],
            [['phone'], 'telnumvn', 'exceptTelco' => ['landLine']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'phone' => 'Phone',
            'email' => 'Email',
            'note' => 'Ghi chú',
            'customer_code' => 'Khách hàng Parent',
            'page' => 'Page',
            'status' => 'Check xử lý',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'created_at' => 'Ngày tạo',
            'updated_at' => 'Updated At',
        ];
    }

    public function afterDelete()
    {
        $id = $this->primaryKey;
        $cache = Yii::$app->cache;
        $key = 'get-find-model-affiliate-customer-contact-' . $id;
        $cache->delete($key);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $id = $this->primaryKey;
        $cache = Yii::$app->cache;
        $key = 'get-find-model-affiliate-customer-contact-' . $id;
        $cache->delete($key);
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function getUserCreatedBy($id)
    {
        if ($id == null) {
            return null;
        }
        $user = UserProfile::find()->where(['user_id' => $id])->one();
        return $user;
    }

    public function getUserUpdatedBy($id)
    {
        if ($id == null) {
            return null;
        }
        $user = UserProfile::find()->where(['user_id' => $id])->one();
        return $user;
    }

    public function checkPhone()
    {
        return self::find()->where(['phone' => $this->phone, 'status' => self::STATUS_DISABLED])->count();
    }

    public function getCustomerHasOne()
    {
        return $this->hasOne(Dep365CustomerOnline::class, ['customer_code' => 'customer_code']);
    }

    public static function getTotalAffiliateCustomerContact()
    {
        $cache = \Yii::$app->cache;
        $key = 'get-total-affiliate-customer-contact-menu-left';

        $data = $cache->get($key);

        if ($data == false) {
            $data = self::find()->where(['status' => self::STATUS_DISABLED])->count();
            $cache->set($key, $data, 600);
        }
        return $data;
    }
}

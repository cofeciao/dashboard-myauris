<?php
/**
 * Created by PhpStorm.
 * User: abc
 * Date: 3/26/2020
 * Time: 10:47 AM
 */

namespace backend\modules\chi\models;


use backend\modules\user\models\User;
use common\models\UserProfile;
use yii\db\ActiveRecord;
use yii\db\Query;

class DeXuatChiModel extends ActiveRecord
{
    const STATUS_DANG_DOI_DUYET = 0;
    const STATUS_TRUONG_PHONG_DUYET = 1;
    const STATUS_KHONG_DUOC_DUYET = 2;
    const STATUS_KE_TOAN_DUYET = 3;
    const STATUS_HOAN_THANH = 4;
    const STATUS_HOAN_TIEN = 5;
    const STATUS_HUY_DE_XUAT = 6;

    const STATUS = [
        self::STATUS_DANG_DOI_DUYET => 'Đang đợi duyệt',
        self::STATUS_TRUONG_PHONG_DUYET => 'Trưởng phòng đã duyệt',
        self::STATUS_KHONG_DUOC_DUYET => 'Không được duyệt',
        self::STATUS_KE_TOAN_DUYET => 'Kế toán đã duyệt',
        self::STATUS_HOAN_THANH => 'Hoàn thành',
        self::STATUS_HOAN_TIEN => 'Hoàn tiền',
        self::STATUS_HUY_DE_XUAT => 'Huỷ đề xuất',
    ];
    const SCENARIO_KE_TOAN = 'ke-toan';
    const SCENARIO_TRUONG_PHONG = 'truong-phong';
    const SCENARIO_NHAN_VIEN = 'nhan-vien';

    const SCENARIO_TIENMAT = 'tien-mat';
    const SCENARIO_CHUYENKHOAN = 'chuyen-khoan';
    const SCENARIO_CHUYENKHOAN_QUY = 'chuyen-khoan-quy';


    const TL_CAN_VIEW_STT = [0, 1, 2, 3, 4, 5, 6];
    const TP_CAN_VIEW_STT = [0, 1];
    const KT_CAN_VIEW_STT = [1, 3, 4, 5, 6];

    const TP_CHUA_DUYET = 0;
    const TP_DUYET = 1;
    const TP_HUY = 2;
    const TP_STATUS = [
        self::TP_CHUA_DUYET => 'Đang thực hiện đề xuất',
        self::TP_DUYET => 'Đề xuất đã được nghiệm thu.',
        self::TP_HUY => 'Nghiệm thu chưa đạt.'
    ];
    const TAM_UNG = 'tam-ung';
    const THANH_TOAN = 'thanh-toan';
    const TYPE_DEXUAT = [self::TAM_UNG => 'Tạm ứng', self::THANH_TOAN => 'Thanh toán'];
    public $payment_method = [
        self::SCENARIO_TIENMAT => 'Tiền mặt',
        self::SCENARIO_CHUYENKHOAN => 'Chuyển khoản',
        self::SCENARIO_CHUYENKHOAN_QUY => 'Chuyển khoản - Thanh toán từ quỹ tiền mặt P. vận hành'
    ];
    public $danh_muc_chi;
    public $nhom_chi;
    public $thoi_gian_bat_dau;
    public $thoi_gian_ket_thuc;
    public $tieu_chi_group;

    public static function tableName()
    {
        return 'thuchi_de_xuat_chi';
    }

    public function beforeSave($insert)
    {
        $cache = \Yii::$app->cache;
        $id = $this->primaryKey;
        $key = 'thuchi-dexuat-get-by-id-' . $id;
        $cache->delete($key);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        $cache = \Yii::$app->cache;
        $id = $this->primaryKey;
        $key = 'thuchi-dexuat-get-by-id-' . $id;
        $cache->delete($key);

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getLeaderHasOne()
    {
        return $this->hasOne(User::class, ['id' => 'leader_accept']);
    }

    public function getChosenHasOne()
    {
        return $this->hasOne(User::class, ['id' => 'chosen_one']);
    }

    public function getInspectionerHasOne()
    {
        return $this->hasOne(User::class, ['id' => 'inspectioner']);
    }

    public function getAccountantHasOne()
    {
        return $this->hasOne(User::class, ['id' => 'accountant_accept']);
    }

    public function getKhoanchiHasOne()
    {
        return $this->hasOne(KhoanChi::class, ['id' => 'khoan_chi']);
    }

    public function getNhomChiHasOne()
    {
        return $this->hasOne(NhomChi::class, ['id' => 'category'])->viaTable(KhoanChi::tableName(), ['id' => 'khoan_chi']);
    }

    public function getDanhMucChiHasOne()
    {
        return $this->hasOne(DanhMucChi::class, ['id' => 'category'])->viaTable(NhomChi::tableName(), ['id' => 'category'])->via('nhomChiHasOne');
    }

    public function getTieuchi()
    {
        return $this->hasOne(ThuchiTieuChi::class, ['id_de_xuat_chi' => 'id']);
    }

    //TODO: gom 2 cái has one nguoidexuat nguoitrienkhai lại.

    public function getNguoidexuatHasOne()
    {
        return $this->hasOne(UserProfile::class, ['user_id' => 'created_by']);
    }

    public function getNguoitrienkhaiHasOne()
    {
        return $this->hasOne(UserProfile::class, ['user_id' => 'nguoi_trien_khai']);
    }

    public function getUserCreatedBy($id)
    {
        if ($id == null) {
            return null;
        }
        $user = UserProfile::find()->where(['user_id' => $id])->one();

        return $user;
    }

    public static function getListUserCreatedBy()
    {
        $list_user = (new Query())->select(['d.created_by', 'u.fullname'])->from([
            DeXuatChiModel::tableName() . ' d',
            UserProfile::tableName() . ' u'
        ])->where('u.user_id=d.created_by')
            ->groupBy(['d.created_by']);
        $list_user = $list_user->all();
        $list_user = array_column($list_user, 'fullname', 'created_by');
        if (!empty($list_user)) {
            return $list_user;
        } else {
            return [];
        }
    }

    public static function getListNguoiTrienKhai()
    {
        $list_user = (new Query())->select(['d.nguoi_trien_khai', 'u.fullname'])->from([
            DeXuatChiModel::tableName() . ' d',
            UserProfile::tableName() . ' u'
        ])->where('u.user_id=d.nguoi_trien_khai')
            ->groupBy(['d.nguoi_trien_khai']);
        $list_user = $list_user->all();
        $list_user = array_column($list_user, 'fullname', 'nguoi_trien_khai');
        if (!empty($list_user)) {
            return $list_user;
        } else {
            return [];
        }
    }

    //nguoi nghiem thu
    public static function getListInspectionerDexuatchi()
    {
        $list_user = (new Query())->select(['d.inspectioner', 'u.fullname'])->from([
            DeXuatChiModel::tableName() . ' d',
            UserProfile::tableName() . ' u'
        ])->where('u.user_id=d.inspectioner')
            ->groupBy(['d.inspectioner']);
        $list_user = $list_user->all();
        $list_user = array_column($list_user, 'fullname', 'inspectioner');
        if (!empty($list_user)) {
            return $list_user;
        } else {
            return [];
        }
    }

    public static function getListLeaderAccept()
    {
        $list_user = (new Query())->select(['d.leader_accept', 'u.fullname'])->from([
            DeXuatChiModel::tableName() . ' d',
            UserProfile::tableName() . ' u'
        ])->where('u.user_id=d.leader_accept')
            ->groupBy(['d.leader_accept']);
        $list_user = $list_user->all();
        $list_user = array_column($list_user, 'fullname', 'leader_accept');
        if (!empty($list_user)) {
            return $list_user;
        } else {
            return [];
        }
    }

    public static function getListAccountAccept()
    {
        $list_user = (new Query())->select(['d.accountant_accept', 'u.fullname'])->from([
            DeXuatChiModel::tableName() . ' d',
            UserProfile::tableName() . ' u'
        ])->where('u.user_id=d.accountant_accept')
            ->groupBy(['d.accountant_accept']);
        $list_user = $list_user->all();
        $list_user = array_column($list_user, 'fullname', 'accountant_accept');
        if (!empty($list_user)) {
            return $list_user;
        } else {
            return [];
        }
    }

    public function getUserUpdatedBy($id)
    {
        if ($id == null) {
            return null;
        }
        $user = UserProfile::find()->where(['user_id' => $id])->one();

        return $user;
    }


    /**
     * @var $maxmin 'max' or 'min'
     * @return number
     */
    public static function getMaxMinAmountOfMoney($maxmin = 'max')
    {
        $res = DeXuatChiModel::find()->select($maxmin . '(cast(so_tien_chi as SIGNED)) as ' . $maxmin)->limit(1)->asArray()->one();

        return $res[$maxmin];
    }

}

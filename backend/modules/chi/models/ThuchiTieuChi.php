<?php

namespace backend\modules\chi\models;

use Yii;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\db\ActiveRecord;
use common\models\UserProfile;

/**
 * This is the model class for table "thuchi_tieu_chi".
 *
 * @property int $id
 * @property int $id_de_xuat_chi
 * @property string $tieu_chi
 * @property string $nd_hoan_thanh
 * @property int $thoi_gian_bat_dau
 * @property int $thoi_gian_ket_thuc
 * @property string $status
 * @property int $created_at
 * @property int $created_by
 * @property int $updated_by
 * @property int $updated_at
 */
class ThuchiTieuChi extends \yii\db\ActiveRecord
{
    const SCENARIO_SAVE = 'save';

    public static function tableName()
    {
        return 'thuchi_tieu_chi';
    }


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }

    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::class,
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => 'updated_by',
            ],
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'preserveNonEmptyValues' => true,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
            [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_VALIDATE => 'thoi_gian_bat_dau',
                ],
                'value' => function ($event) {
                    if (!empty($event->sender->thoi_gian_bat_dau)) {
                        return strtotime($event->sender->thoi_gian_bat_dau);
                    } else {
                        return strtotime(time());
                    }
                }
            ],
            [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_VALIDATE => 'thoi_gian_ket_thuc',
                ],
                'value' => function ($event) {
                    if (!empty($event->sender->thoi_gian_ket_thuc)) {
                        return strtotime($event->sender->thoi_gian_ket_thuc);
                    } else {
                        return strtotime(time());
                    }
                }
            ]
        ];
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id_de_xuat_chi'], 'required', 'on' => self::SCENARIO_SAVE],
            [['tieu_chi'], 'required'],
            [['thoi_gian_bat_dau', 'thoi_gian_ket_thuc',], 'required'],
            [['id_de_xuat_chi', 'thoi_gian_bat_dau', 'thoi_gian_ket_thuc', 'created_at', 'created_by', 'updated_by', 'updated_at'], 'integer'],
            [['nd_hoan_thanh'], 'string'],
            [['status'], 'boolean'],
            [['tieu_chi'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'id_de_xuat_chi' => 'Id De Xuat Chi',
            'tieu_chi' => 'Tieu Chi',
            'nd_hoan_thanh' => 'Nd Hoan Thanh',
            'created_at' => 'Created At',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'updated_at' => 'Updated At',
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [
            'thuchi-tieu-chi-get-by-id-' . $this->id
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [
            'thuchi-tieu-chi-get-by-id-' . $this->id
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function getUserCreatedBy($id)
    {
        if ($id == null)
            return null;
        $user = UserProfile::find()->where(['user_id' => $id])->one();
        return $user;
    }


    public function getUserUpdatedBy($id)
    {
        if ($id == null)
            return null;
        $user = UserProfile::find()->where(['user_id' => $id])->one();
        return $user;
    }

    public static function getDexuat($id)
    {
        return DeXuatChi::find(['id' => $id]);
    }


    /*
        public static function isTieuChiNotActived()
        {

        }*/

}

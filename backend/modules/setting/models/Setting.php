<?php

namespace backend\modules\setting\models;

use Yii;

/**
 * This is the model class for table "setting".
 *
 * @property int $id
 * @property string $param
 * @property string $value
 */
class Setting extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'setting';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['param', 'value', 'key_value'], 'required'],
            [['param', 'value', 'key_value'], 'string'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('backend', 'ID'),
            'param' => Yii::t('backend', 'TÃªn'),
            'key_value' => 'Key',
            'value' => Yii::t('backend', 'Value'),
        ];
    }

    public function afterDelete()
    {
        $key = $this->getAttribute('key_value');
        $cache = Yii::$app->cache;
        $key = 'get-key-' . $key;
        $cache->delete($key);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $key = $this->getAttribute('key_value');
        $cache = Yii::$app->cache;
        $key = 'get-key-' . $key;
        $cache->delete($key);
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function getKey($key_value)
    {
        $cache = Yii::$app->cache;
        $key = 'get-key-' . $key_value;
        $data = $cache->get($key);
        if ($data == false) {
            $data = static::find()->where(['key_value' => $key_value])->one();
            $cache->set($key, $data, 30 * 86400);
        }
        return $data;
    }
}

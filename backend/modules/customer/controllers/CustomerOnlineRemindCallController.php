<?php

namespace backend\modules\customer\controllers;

use backend\models\CustomerModel;
use backend\modules\customer\models\CustomerOnlineRemindCall;
use backend\modules\customer\models\Dep365CustomerOnline;
use backend\modules\customer\models\Dep365CustomerOnlineDathenTime;
use backend\modules\customer\models\RemindCall\CustomerOnlineModel;
use backend\modules\user\models\User;
use backend\modules\user\models\UserTimelineModel;
use Yii;
use backend\models\Dep365CustomerOnlineRemindCall;
use backend\modules\customer\models\search\CustomerOnlineRemindCallSearch;
use backend\components\MyController;
use yii\bootstrap\ActiveForm;
use yii\db\Transaction;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use backend\components\MyComponent;
use yii\web\Response;

/**
 * CustomerOnlineRemindCallController implements the CRUD actions for Dep365CustomerOnlineRemindCall model.
 */
class CustomerOnlineRemindCallController extends MyController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $cache = \Yii::$app->cache;
        $key = 'get-remind-totay';
        $cache->delete($key);
    }

    public function actionIndex()
    {
        $searchModel = new CustomerOnlineRemindCallSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        if (MyComponent::hasCookies('pageSize')) {
            $dataProvider->pagination->pageSize = MyComponent::getCookies('pageSize');
        } else {
            $dataProvider->pagination->pageSize = 10;
        }

        $pageSize = $dataProvider->pagination->pageSize;

        $totalCount = $dataProvider->totalCount;

        $totalPage = (($totalCount + $pageSize - 1) / $pageSize);

        $edit = Yii::$app->request->get('edit');
        $remind_id = Yii::$app->request->get('remind_id');

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'totalPage' => $totalPage,
            'edit' => $edit,
            'remind_id' => $remind_id
        ]);
    }

    public function actionPerpage($perpage)
    {
        MyComponent::setCookies('pageSize', $perpage);
    }

    public function actionView($id)
    {
        if ($this->findModel($id)) {
            return $this->render('view', [
                'model' => $this->findModel($id),
            ]);
        } else {
            return $this->redirect(['index']);
        }
    }

    public function actionCreate()
    {
        $model = new Dep365CustomerOnlineRemindCall();

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            try {
                $model->save();
                Yii::$app->session->setFlash('alert', [
                    'body' => Yii::$app->params['create-success'],
                    'class' => 'bg-success',
                ]);
            } catch (\yii\db\Exception $exception) {
                Yii::$app->session->setFlash('alert', [
                    'body' => Yii::$app->params['create-danger'],
                    'class' => 'bg-danger',
                ]);
            }
            return $this->refresh();
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing Dep365CustomerOnlineRemindCall model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        if (Yii::$app->request->isAjax) {
            $model = CustomerOnlineRemindCall::find()->where([CustomerOnlineRemindCall::tableName() . '.id' => $id])->one();
            if ($model == null) {
                return $this->renderAjax('_error', [
                    'error' => 'Không tìm thấy dữ liệu'
                ]);
            }
            $model->co_so = $model->customerHasOne->co_so;
            return $this->renderAjax('update', [
                'model' => $model,
            ]);
        }
    }

    public function actionValidationUpdate($id)
    {
        if (Yii::$app->request->isAjax) {
            $model = CustomerOnlineRemindCall::find()->where(['id' => $id])->one();
            if ($model != null) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                if ($model->load(Yii::$app->request->post())) {
                    if ($model->choose == CustomerOnlineRemindCall::SCENARIO_DOI_LICH) {
                        $model->scenario = CustomerOnlineRemindCall::SCENARIO_DOI_LICH;
                    } elseif ($model->choose == CustomerOnlineRemindCall::SCENARIO_DOI_NHAC_LICH) {
                        $model->scenario = CustomerOnlineRemindCall::SCENARIO_DOI_NHAC_LICH;
                    } else {
                        $model->scenario = CustomerOnlineRemindCall::SCENARIO_TU_CHOI;
                    }
                    return ActiveForm::validate($model);
                }
            }
        }
    }

    public function actionSubmitUpdate($id)
    {
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $model = CustomerOnlineRemindCall::find()->where(['id' => $id])->one();
            if ($model == null) {
                return [
                    'code' => 404,
                    'msg' => 'Không tìm thấy dữ liệu'
                ];
            }
            $customer = CustomerOnlineModel::find()->where(['id' => $model->customer_id])->one();
            if (!$model->load(Yii::$app->request->post())) {
                return [
                    'code' => 400,
                    'msg' => 'Lỗi dữ liệu'
                ];
            }
            if ($model->choose == CustomerOnlineRemindCall::SCENARIO_DOI_LICH) {
                $model->scenario = CustomerOnlineRemindCall::SCENARIO_DOI_LICH;
            } elseif ($model->choose == CustomerOnlineRemindCall::SCENARIO_DOI_NHAC_LICH) {
                $model->scenario = CustomerOnlineRemindCall::SCENARIO_DOI_NHAC_LICH;
            } else {
                $model->scenario = CustomerOnlineRemindCall::SCENARIO_TU_CHOI;
            }
            if (!$model->validate()) {
                return [
                    'code' => 403,
                    'msg' => 'Lỗi dữ liệu',
                    'error' => $model->getErrors(),
                ];
            }
            $transaction = Yii::$app->db->beginTransaction(
                Transaction::SERIALIZABLE
            );
            /*
             * cập nhật nhắc lịch: trạng thái = DISABLED
            */
            $model->remind_call_status = Dep365CustomerOnlineRemindCall::STATUS_DISABLED;
            if ($model->choose == CustomerOnlineRemindCall::SCENARIO_DOI_LICH) {
                /* Đổi lịch
                 *
                 * => cập nhật nhắc lịch: solution = DOI_LICH
                 *
                 * => cập nhật khách hàng:
                 * - thời gian lịch hẹn = thời gian nhập vào
                 * - trạng thái = ĐẶT HẸN
                 * - đặt hẹn = NULL
                */
                $customer->scenario = CustomerOnlineModel::SCENARIO_DAT_HEN_LAI;
                $customer->status = Dep365CustomerOnline::STATUS_DH;
                $customer->time_lichhen = strtotime($model->time_lichhen);
                $customer->co_so = $model->co_so;
                $customer->status_fail = null;
                $customer->dat_hen_fail = null;
                $customer->dat_hen = null;
            } elseif ($model->choose == CustomerOnlineRemindCall::SCENARIO_DOI_NHAC_LICH) {
                /* Dời nhắc lịch
                 *
                 * => cập nhật nhắc lịch:
                 * - trạng thái = PUBLISHED
                 * - thời gian nhắc lịch mới
                */
                $model->remind_call_status = Dep365CustomerOnlineRemindCall::STATUS_PUBLISHED;
                $model->remind_call_time = strtotime($model->remind_call_time);
                if ($model->getOldAttribute('status') == Dep365CustomerOnline::STATUS_FAIL) {
                    /* Status cũ là Fail => Status mới luôn là Fail, ko được cập nhật về KBM */
                    $model->status = Dep365CustomerOnline::STATUS_FAIL;
                    $customer->status = Dep365CustomerOnline::STATUS_FAIL;
                    $customer->status_fail = $model->status_fail;
                }
            } else {
                /* Từ chối làm dịch vụ
                 *
                 * => cập nhật nhắc lịch: solution = TU_CHOI
                 *
                 * => cập nhật khách hàng:
                 * - lý do khách từ chối = lý do nhập vào
                */
                $customer->reason_reject = $model->reason_reject;
            }
            if (!$model->save()) {
                $transaction->rollBack();
                return [
                    'code' => 400,
                    'msg' => Yii::$app->params['update-danger']
                ];
            }
            $modelOld = $customer->getOldAttributes();
            $modelNews = $customer->getAttributes();
            if (!$customer->save()) {
                $transaction->rollBack();
                return [
                    'code' => 403,
                    'msg' => Yii::$app->params['update-danger'],
                    'error' => $customer->getErrors()
                ];
            }
            $user = new User();
            $roleUser = $user->getRoleName(Yii::$app->user->id);
            /*return [
                'code' => 400,
                'mess' => 'a',
                'a' => $customer->getAttributes()
            ];*/
            if ($customer->status == 1 && $model->time_lichhen != '' && $modelNews['time_lichhen'] != $modelOld['time_lichhen']) {
                $dayDathen = date('d-m-Y');
                $query = Dep365CustomerOnlineDathenTime::find()->where(['customer_online_id' => $customer->primaryKey]);
                $query->andWhere(['between', 'time_change', strtotime($dayDathen), strtotime($dayDathen) + 86399]);
                $khachDH = $query->one();
                if ($khachDH === null) {
                    $khachDH = new Dep365CustomerOnlineDathenTime();
                    $khachDH->time_lichhen = $modelOld['time_lichhen'];
                } else {
                    $khachDH->time_lichhen = null;
                }

                $khachDH->customer_online_id = $customer->primaryKey;
                $khachDH->time_lichhen_new = $modelNews['time_lichhen'];
                $khachDH->date_lichhen_new = strtotime(date('d-m-Y', $khachDH->time_lichhen_new));

                if ($modelOld['time_lichhen'] > $modelNews['time_lichhen'] &&
                    ($roleUser != \common\models\User::USER_DEVELOP && $roleUser != \common\models\User::USER_ADMINISTRATOR && $roleUser != \common\models\User::USER_MANAGER_ONLINE)) {
                    $transaction->rollBack();
                    return [
                        'status' => 403,
                        'mess' => 'Ngày đặt hẹn mới không thể trước ngày đặt hẹn cũ.',
                    ];
                }
                if ($customer->created_by == null || $customer->created_by == 1 || $customer->created_by == '') {
                    $khachDH->user_id = Yii::$app->user->id;
                } else {
                    $khachDH->user_id = $customer->permission_user;
                }
                $khachDH->date_change = strtotime(date('d-m-Y', time()));
                $khachDH->time_change = time();
                $user_timeline = new UserTimelineModel();
                $user_timeline->action = [UserTimelineModel::ACTION_CAP_NHAT, UserTimelineModel::ACTION_DAT_HEN];
                $user_timeline->customer_id = $model->primaryKey;
                if (!$user_timeline->save()) {
                    $transaction->rollBack();
                    return [
                        'status' => 400,
                        'mess' => Yii::$app->params['update-danger']
                    ];
                }
                $cache = Yii::$app->cache;
                $key = 'redis-screen-online';
                $cache->set($key, [
                    'srcOnlTimeline' => UserTimelineModel::ACTION_CAP_NHAT,
                ]);
                if (!$khachDH->save()) {
                    $transaction->rollBack();
                    return [
                        'status' => 400,
                        'mess' => Yii::$app->params['update-danger']
                    ];
                }
            }
            $transaction->commit();
            return [
                'code' => 200,
                'msg' => Yii::$app->params['update-success'],
            ];
        }
    }

    public function actionDelete()
    {
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
            $id = Yii::$app->request->post('id');
            try {
                if ($this->findModel($id)->delete()) {
                    return [
                        "status" => "success"
                    ];
                } else {
                    return [
                        "status" => "failure"
                    ];
                }
            } catch (\yii\db\Exception $e) {
                return [
                    "status" => "exception"
                ];
            }
        }

        return $this->redirect(['index']);
    }

    public function actionShowHide()
    {
        if (Yii::$app->request->isAjax) {
            $id = Yii::$app->request->post('id');

            $model = $this->findModel($id);
            try {
                if ($model->status == 1) {
                    $model->status = 0;
                } else {
                    $model->status = 1;
                }
                if ($model->save()) {
                    echo 1;
                }
            } catch (\yii\db\Exception $exception) {
                echo 0;
            }
        }
    }

    public function actionDeleteMultiple()
    {
        try {
            $action = Yii::$app->request->post('action');
            $selectCheckbox = Yii::$app->request->post('selection');
            if ($action === 'c') {
                if ($selectCheckbox) {
                    foreach ($selectCheckbox as $id) {
                        $this->findModel($id)->delete();
                    }
                    \Yii::$app->session->setFlash('indexFlash', 'Bạn đã xóa thành công.');
                }
            }
        } catch (\yii\db\Exception $e) {
            if ($e->errorInfo[1] == 1451) {
                throw new \yii\web\HttpException(400, 'Failed to delete the object.');
            } else {
                throw $e;
            }
        }
        return $this->redirect(['index']);
    }

    protected function findModel($id)
    {
        if (($model = Dep365CustomerOnlineRemindCall::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}

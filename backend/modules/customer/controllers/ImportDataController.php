<?php
/**
 * Created by PhpStorm.
 * User: USER
 * Date: 03-Jan-19
 * Time: 3:33 PM
 */

namespace backend\modules\customer\controllers;

use backend\modules\customer\models\Dep365CustomerOnlineFanpage;
use backend\modules\customer\models\Pancake;
use backend\modules\user\models\User;
use Box\Spout\Common\Type;
use Box\Spout\Reader\ReaderFactory;
use common\models\UserProfile;
use Yii;
use backend\components\MyController;
use backend\modules\customer\models\FormImportPancake;
use yii\db\Transaction;
use yii\web\UploadedFile;

class ImportDataController extends MyController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        set_time_limit(false);
    }

    public function actionImportDataFromHana($from = null, $to = null)
    {
        $dateFromInput = ['2019-10-22', '2019-10-23', '2019-10-24', '2019-10-25', '2019-10-26', '2019-10-27', '2019-10-28', '2019-10-29', '2019-10-30', '2019-10-31', '2019-11-01'];
        if ($from != null && $to != null && $this->checkDate($from) && $this->checkDate($to)) {
            $loop = $from;
            if (strtotime($from) <= strtotime($to . ' +1day')) {
                $dateFromInput = [];
                while (date('Y-m-d', strtotime($loop)) != date('Y-m-d', strtotime($to . ' +2day'))) {
                    $dateFromInput[] = date('Y-m-d', strtotime($loop));
                    $loop = date('Y-m-d', strtotime($loop . ' +1day'));
                }
            }
        }

        $dataFanpage = Dep365CustomerOnlineFanpage::find()->published()->all();
        $dataUser = $data = User::find()->joinWith(['userProfile'])
            ->where(['in', 'user.status', [User::STATUS_ACTIVE, User::STATUS_NOT_ACTIVE]])
            ->andWhere('user_profile.id_hana IS NOT null')
            ->join('LEFT JOIN', 'rbac_auth_assignment', 'rbac_auth_assignment.user_id = id')
            ->andFilterWhere(['or', ['rbac_auth_assignment.item_name' => User::USER_NHANVIEN_ONLINE], ['rbac_auth_assignment.item_name' => User::USER_MANAGER_ONLINE]])
            ->all();
        $dem = count($dateFromInput);
        if ($dem > 0) {
            for ($i = 0; $i < $dem - 1; $i++) {
                foreach ($dataUser as $keys => $value) {
                    if ($value == null) {
                        continue;
                    }
                    $idHana = $value->userProfile->id_hana;
                    if ($idHana != null) {
                        foreach ($dataFanpage as $key => $item) {
                            $channelIds = $this->getIdCrmFromIdPage($item->id);
                            $num = $this->getDataHana($idHana, $dateFromInput[$i], $dateFromInput[$i + 1], $channelIds);

                            $pancake = $this->findHana($value->id, strtotime($dateFromInput[$i]), $item->id);
                            if ($pancake == null) {
                                $pancake = new Pancake();
                            }
                            $pancake->user_id = $value->id;
                            $pancake->number_pancake = $num;
                            $pancake->page_facebook = $item->id;
                            $pancake->date_import = strtotime($dateFromInput[$i]);
                            $pancake->created_by = 1;
                            $pancake->updated_by = 1;

                            if (!$pancake->save()) {
                                break;
                            }
                        }
                    }
                }
            }
        }
        return $this->redirect(['/site/index']);
    }

    // Lấy tương tác trên Hana
    protected function getDataHana($assigneeIds, $dateFromInput, $dateToInput, $channelIds)
    {
//        $assigneeIds = 1317301011760569;
//        //
//        $dateFromInput = '2019-11-02';
//        $dateToInput = '2019-11-03';

        $userId = UserProfile::find()->select('user_id')->where(['id_hana' => $assigneeIds])->one();

        $HANA_ID_APP = "45f63bdd-1845-4f0a-ad5f-f6d3e7907e12";
        $HANA_USER_ID_ADMIN = 1136561149865799;
        $authorization = "Bearer eyJhbGciOiJIUzUxMiJ9.eyJhY2NvdW50Ijp7ImlkIjoiMTEzNjU2MTE0OTg2NTc5OSIsInR5cGVMb2dpbiI6ImZhY2Vib29rIiwidXNlcm5hbWUiOiIxMTM2NTYxMTQ5ODY1Nzk5Iiwic3RhdHVzIjoiYWN0aXZlZCIsImFjY2Vzc1Rva2VuIjoiRUFBUU1MNUhQRUNzQkFIVlpCYUxudnlOT1pBWWtXZGczY0NIRVdSUGdMN1RGYkZaQmpuSHFLSE4wU3ZQMXVOdWdpUFFoaWQyTkY2R3RGcEs1bWlaQ2pqNjlaQXdrNnJRVHVLNlR2WkJQZWFCaDY2VlpCZGJkUmZVUmFWZDJBTWczUXVPT3FDcUR2TEczekZxemZoSk8wSmpmZTh2eWpPeWRxRU1ZVEZNMkRhSjZ3WkRaRCIsImp3dCI6bnVsbCwiaXNOZXdVc2VyIjpmYWxzZSwiaXNFeGlzdE9sZEZiQXBwIjpudWxsLCJyZWYiOm51bGwsImFjY291bnRJbmZvIjp7ImlkIjoiMjEwZDRjZDQtZjg0NS00NmUyLWI2NWMtZjRiM2JmMGZjMTQ2IiwibmFtZSI6IlBo4bqhbSBUaMOgbmggTmdoxKlhIiwiZW1haWwiOiJwaGFtdGhhbmhuZ2hpYTczMTk5N0BnbWFpbC5jb20iLCJwaG9uZSI6bnVsbCwiYXZhdGFyVXJsIjoiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vMTEzNjU2MTE0OTg2NTc5OS9waWN0dXJlP3dpZHRoPTEwMCIsIm5hbWVDb2xsZWN0IjpudWxsLCJlbWFpbENvbGxlY3QiOm51bGwsInBob25lQ29sbGVjdCI6bnVsbCwiY2F0ZWdvcnlDb2xsZWN0IjpudWxsLCJjb3Vwb25Db2xsZWN0IjpudWxsLCJzb3VyY2VDb2xsZWN0IjpudWxsLCJiaXRyaXhMZWFkSWQiOm51bGx9LCJjcmVhdGVkQXQiOjE1NzI0OTExNzQ4NjYsIm1vZGlmaWVkQXQiOjE1NzI0OTExNzQ4NjZ9LCJleHAiOjE1NzMzNTUxNzQsImlzcyI6Ik1pZGVhcyIsInN1YiI6IkhhbmEiLCJqd3RTb3VyY2VUeXBlIjoiY2xpZW50IiwianRpIjoie1wiaWRcIjpcIjExMzY1NjExNDk4NjU3OTlcIixcInR5cGVMb2dpblwiOlwiZmFjZWJvb2tcIixcInVzZXJuYW1lXCI6XCIxMTM2NTYxMTQ5ODY1Nzk5XCIsXCJzdGF0dXNcIjpcImFjdGl2ZWRcIixcImFjY2Vzc1Rva2VuXCI6XCJFQUFRTUw1SFBFQ3NCQUhWWkJhTG52eU5PWkFZa1dkZzNjQ0hFV1JQZ0w3VEZiRlpCam5IcUtITjBTdlAxdU51Z2lQUWhpZDJORjZHdEZwSzVtaVpDamo2OVpBd2s2clFUdUs2VHZaQlBlYUJoNjZWWkJkYmRSZlVSYVZkMkFNZzNRdU9PcUNxRHZMRzN6RnF6ZmhKTzBKamZlOHZ5ak95ZHFFTVlURk0yRGFKNndaRFpEXCIsXCJqd3RcIjpudWxsLFwiaXNOZXdVc2VyXCI6ZmFsc2UsXCJpc0V4aXN0T2xkRmJBcHBcIjpudWxsLFwicmVmXCI6bnVsbCxcImFjY291bnRJbmZvXCI6e1wiaWRcIjpcIjIxMGQ0Y2Q0LWY4NDUtNDZlMi1iNjVjLWY0YjNiZjBmYzE0NlwiLFwibmFtZVwiOlwiUGjhuqFtIFRow6BuaCBOZ2jEqWFcIixcImVtYWlsXCI6XCJwaGFtdGhhbmhuZ2hpYTczMTk5N0BnbWFpbC5jb21cIixcInBob25lXCI6bnVsbCxcImF2YXRhclVybFwiOlwiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vMTEzNjU2MTE0OTg2NTc5OS9waWN0dXJlP3dpZHRoPTEwMFwiLFwibmFtZUNvbGxlY3RcIjpudWxsLFwiZW1haWxDb2xsZWN0XCI6bnVsbCxcInBob25lQ29sbGVjdFwiOm51bGwsXCJjYXRlZ29yeUNvbGxlY3RcIjpudWxsLFwiY291cG9uQ29sbGVjdFwiOm51bGwsXCJzb3VyY2VDb2xsZWN0XCI6bnVsbCxcImJpdHJpeExlYWRJZFwiOm51bGx9LFwiY3JlYXRlZEF0XCI6MTU3MjQ5MTE3NDg2NixcIm1vZGlmaWVkQXRcIjoxNTcyNDkxMTc0ODY2fSJ9.gImJQR6bhx49krNbLPacrddhwbwTR5kWbcxfEwceRQTmaVFOJZEriJA_rAO3_HcSRxPqGAmzNNweDTxWKcbN3w";

        $dateFrom = date(DATE_W3C, strtotime($dateFromInput)); // DATE_ISO8601 elastic build query failed
        $dateTo = date(DATE_W3C, strtotime($dateToInput));

        $arraySend = [
            "assigneeIds" => [$assigneeIds],
            "dateCreatedAtRange" => [
                "from" => $dateFrom,
                "to" => $dateTo
            ],
            "channelIds" => ["$channelIds"]
        ];
        $payload = json_encode($arraySend);

        $url = "https://api.hana.ai/v1.1/chat/" . $HANA_ID_APP . "/conversations?page=0&size=20&userId=" . $HANA_USER_ID_ADMIN . "&sort=updatedAt,desc";
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLINFO_HEADER_OUT, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
        curl_setopt(
            $ch,
            CURLOPT_HTTPHEADER,
            array(
                'Content-Type: application/json',
                'authorization:' . $authorization)
        );

        $result = curl_exec($ch);
        $result = json_decode($result, true);
        if (isset($result['totalElements'])) {
            return $result['totalElements'];
        }
        return null;
    }

    protected function getIdCrmFromIdPage($ipPage = '')
    {
        switch ($ipPage) {
            case '3':
                return 102940220483371;
                break;
            case  '4':
                return 776921232687578;
                break;
            case '2':
                return 166536310081768;
                break;
            default:
                return null;
                break;
        }
    }

    public function actionImportPancake()
    {
        $model = new FormImportPancake();
        if ($model->load(Yii::$app->request->post())) {
            $file = UploadedFile::getInstance($model, 'fileExcel');
            $fileName = $file->baseName . '.' . $file->extension;
            $file->saveAs('uploads/temp/' . $fileName);
            $filePath = Yii::$app->basePath . '/web/uploads/temp/' . $fileName;
            $model->fileExcel = $filePath;
            if ($model->validate()) {
                switch (strtoupper($file->extension)) {
                    case 'XLSX':
                        $reader = ReaderFactory::create(Type::XLSX);
                        break;
                    case 'CSV':
                        $reader = ReaderFactory::create(Type::CSV);
                        break;
                    default:
                        $reader = ReaderFactory::create(Type::XLSX);
                        break;
                }

                try {
                    $reader->open($model->fileExcel);
                } catch (\Exception $exception) {
                    $model->addErrors(['fileExcel' => 'Vui lòng tải lên 1 file excel']);
                    return $this->render('importPancake', [
                        'model' => $model,
                    ]);
                }
                $transaction = Yii::$app->db->beginTransaction(
                    Transaction::SERIALIZABLE
                );
                try {
                    $dayImport = '';
                    foreach ($reader->getSheetIterator() as $sheetIndex => $sheet) {
                        if ($sheetIndex > 1) {
                            break;
                        }
                        foreach ($sheet->getRowIterator() as $rowIndex => $row) {
                            if ($rowIndex == 1) {
                                $arr = explode('/', $row[4]);
                                $dayImport = $arr[0] . '-' . $arr[1] . '-' . date("Y");
                                continue;
                            }

                            $pancakeString = trim((string)$row[2]);
                            $user_id = $this->findUserModel($pancakeString);
                            if ($user_id == false) {
                                continue;
                            }
                            $pc = $this->findPancake($user_id, strtotime($dayImport), $model->pagefacebook);
                            if (!$pc) {
                                $pancake = new Pancake();
                            } else {
                                $pancake = $this->findModelPancake($pc);
                            }

                            $pancake->user_id = $user_id;
                            if ($row[4] < 0) {
                                $num = 0;
                            } else {
                                $num = $row[4];
                            }
                            $pancake->number_pancake = $num;
                            $pancake->page_facebook = $model->pagefacebook;
                            $pancake->date_import = strtotime($dayImport);
                            if (!$pancake->save()) {
                                $transaction->rollBack();
                            }
                        }
                    }
                    $reader->close();
                    $transaction->commit();
                    Yii::$app->session->setFlash('alert', [
                        'body' => 'Hoàn thành',
                        'class' => 'bg-success',
                    ]);
                } catch (\yii\db\Exception $exception) {
                    $transaction->rollBack();
                    Yii::$app->session->setFlash('alert', [
                        'body' => 'Không thành công',
                        'class' => 'bg-danger',
                    ]);
                }

                return $this->refresh();
            }
        }
        return $this->render('importPancake', [
            'model' => $model
        ]);
    }

    protected function findModelPancake($id)
    {
        $pancake = Pancake::findOne($id);
        if ($pancake) {
            return $pancake;
        }
        return false;
    }

    protected function findUserModel($pancakeString)
    {
        $user = UserProfile::find()
            ->joinWith(['user'])
            ->where(['id_pancake' => $pancakeString])
            ->andWhere(['status' => User::STATUS_ACTIVE])
            ->one();
        if ($user !== null) {
            return $user->user_id;
        }

        return false;
    }

    protected function findPancake($user_id, $timeImport, $pageface)
    {
        $panCake = Pancake::find()->where(['user_id' => $user_id, 'date_import' => $timeImport, 'page_facebook' => $pageface])->one();
        if ($panCake) {
            return $panCake->id;
        }
        return false;
    }

    protected function findModelHana($hn)
    {
        $pancake = Pancake::find()->where(['id' => $hn])->one();
        if ($pancake != null) {
            return $pancake;
        }

        return false;
    }

    protected function findHana($user_id, $timeImport, $pageface)
    {
        $hana = Pancake::find()->where(['user_id' => $user_id, 'date_import' => $timeImport, 'page_facebook' => $pageface])->one();
        if ($hana != null) {
            return $hana;
        }
        return false;
    }

    protected function checkDate($date)
    {
        $tmp = strtotime($date);
        $month = date('m', $tmp);
        $day = date('d', $tmp);
        $year = date('Y', $tmp);
        return checkdate($month, $day, $year);
    }
    //
    public function actionImportPancakeNew()
    {
        $model = new FormImportPancake();
        if ($model->load(Yii::$app->request->post())) {
            $file = UploadedFile::getInstance($model, 'fileExcel');
            $fileName = $file->baseName . '.' . $file->extension;
            $file->saveAs('uploads/temp/' . $fileName);
            $filePath = Yii::$app->basePath . '/web/uploads/temp/' . $fileName;
            $model->fileExcel = $filePath;
            if ($model->validate()) {
                switch (strtoupper($file->extension)) {
                    case 'XLSX':
                        $reader = ReaderFactory::create(Type::XLSX);
                        break;
                    case 'CSV':
                        $reader = ReaderFactory::create(Type::CSV);
                        break;
                    default:
                        $reader = ReaderFactory::create(Type::XLSX);
                        break;
                }

                try {
                    $reader->open($model->fileExcel);
                } catch (\Exception $exception) {
                    $model->addErrors(['fileExcel' => 'Vui lòng tải lên 1 file excel']);
                    return $this->render('importPancakeNew', [
                        'model' => $model,
                    ]);
                }
                $transaction = Yii::$app->db->beginTransaction(
                    Transaction::SERIALIZABLE
                );
                try {
                    $dayImport = '';
                    $aData = $ArrayDate = [];

                    foreach ($reader->getSheetIterator() as $sheetIndex => $sheet) {
                        if ($sheetIndex > 1) {
                            break;
                        }

                        foreach ($sheet->getRowIterator() as $rowIndex => $row) {
                            if ($rowIndex == 1) {
                                foreach ($row as $key => $value) {
                                    if ($key >= 3) {
                                        $dayImport =  $row[$key]->format('d-m-Y');
                                        $ArrayDate[$key] = $dayImport;
                                    }
                                }
                                continue;
                            }

                            foreach ($row as $key => $value) {
                                if ($value < 0 || $value == null) {
                                    $value = 0;
                                }
                                if ($key == 2) {
                                    $rowIndex = $value;
                                }
                                if ($key > 2) {
                                    $aData[$row[2]][$key] = $value;
                                }
                            }

                            foreach ($aData as $user_pancake => $listDate) {
                                foreach ($listDate as $id_date => $value) {
                                    $user_id = (int)$user_pancake;
                                    $dayImport = $ArrayDate[$id_date];
                                    $pc = $this->findPancake($user_id, strtotime($dayImport), $model->pagefacebook);
                                    if (!$pc) {
                                        $pancake = new Pancake();
                                    } else {
                                        $pancake = $this->findModelPancake($pc);
                                    }

                                    $pancake->user_id = $user_id;
                                    $pancake->number_pancake = $value;
                                    $pancake->page_facebook = $model->pagefacebook;
                                    $pancake->date_import = strtotime($dayImport);
                                    if (!$pancake->save()) {
                                        $transaction->rollBack();
                                    }
                                }
                            }

                            /*
                            $aData[user_pancake] => [
                                'id date' => value
                            ]
                            */
                        }
//                        echo "<pre>";
//                        print_r($aData);
//                        echo "</pre>";
//                        die;
                    }
                    $reader->close();
                    $transaction->commit();
                    Yii::$app->session->setFlash('alert', [
                        'body' => 'Hoàn thành',
                        'class' => 'bg-success',
                    ]);
                } catch (\yii\db\Exception $exception) {
                    $transaction->rollBack();
                    Yii::$app->session->setFlash('alert', [
                        'body' => 'Không thành công',
                        'class' => 'bg-danger',
                    ]);
                }

                return $this->refresh();
            }
        }
        return $this->render('importPancakeNew', [
            'model' => $model
        ]);
    }
}

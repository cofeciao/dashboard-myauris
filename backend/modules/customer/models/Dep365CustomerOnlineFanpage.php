<?php

namespace backend\modules\customer\models;

use backend\modules\customer\models\query\Dep365CustomerOnlineFanpageQuery;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\db\ActiveRecord;
use common\models\UserProfile;

/**
 * This is the model class for table "dep365_customer_online_fanpage".
 *
 * @property int $id
 * @property string $name
 * @property string $slug
 * @property string $mota
 * @property int $status
 * @property int $created_at
 * @property int $updated_at
 * @property int $created_by
 * @property int $updated_by
 */
class Dep365CustomerOnlineFanpage extends \yii\db\ActiveRecord
{
    const STATUS_PUBLISHED = 1;
    const STATUS_DRAFF = 0;

    public static function tableName()
    {
        return 'dep365_customer_online_fanpage';
    }

    public static function find()
    {
        return new Dep365CustomerOnlineFanpageQuery(get_called_class());
    }

    public function behaviors()
    {
        return [
            'slug' => [
                'class' => SluggableBehavior::class,
                'attribute' => 'name',
                'slugAttribute' => 'slug',
                'immutable' => true, //only create 1
                'ensureUnique' => true, //
            ],
            [
                'class' => BlameableBehavior::class,
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => 'updated_by',
            ],
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'preserveNonEmptyValues' => true,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
        ];
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'slug'], 'required'],
            [['mota', 'id_facebook'], 'string'],
            [['status', 'created_at', 'updated_at', 'created_by', 'updated_by'], 'integer'],
            [['name', 'slug'], 'string', 'max' => 255],
            [['id_dich_vu'], 'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('backend', 'ID'),
            'name' => Yii::t('backend', 'Trang facebook'),
            'slug' => Yii::t('backend', 'Slug'),
            'mota' => Yii::t('backend', 'Mô tả'),
            'id_dich_vu' => Yii::t('backend', 'Dịch vụ'),
            'id_facebook' => Yii::t('backend', 'ID Facebook'),
            'status' => Yii::t('backend', 'Status'),
            'created_at' => Yii::t('backend', 'Created At'),
            'updated_at' => Yii::t('backend', 'Updated At'),
            'created_by' => Yii::t('backend', 'Created By'),
            'updated_by' => Yii::t('backend', 'Updated By'),
        ];
    }

    public function afterDelete()
    {
        $id = $this->primaryKey;
        $cache = Yii::$app->cache;
        $key = 'redis-name-fanpage-by-id-' . $id;
        $cache->delete($key);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $id = $this->primaryKey;
        $cache = Yii::$app->cache;
        $key = 'redis-name-fanpage-by-id-' . $id;
        $cache->delete($key);
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function getNameFanpage($id)
    {
        $cache = Yii::$app->cache;
        $key = 'redis-name-fanpage-by-id-' . $id;
        $data = $cache->get($key);
        if ($data === false) {
            $data = self::find()->where(['id' => $id])->one();
            $cache->set($key, $data, 86400 * 30);
        }
        if ($data == null) {
            return null;
        }
        return $data->name;
    }

    public static function getListFanpage()
    {
        $cache = Yii::$app->cache;
        $key = 'redis-get-list-fanpage';
        $data = $cache->get($key);
        if ($data === false) {
            $data = self::find()->published()->all();
            $cache->set($key, $data);
        }
        return $data;
    }

    public static function getListFanpageArray()
    {
        $data = self::getListFanpage();
        $result = [];
        foreach ($data as $key => $item) {
            $result[$item->id] = $item->name;
        }
        return $result;
    }

    public function getUserCreatedBy($id)
    {
        if ($id == null) {
            $id = 2;
        }
        $user = UserProfile::find()->where(['user_id' => $id])->one();
        return $user;
    }

    public function getUserUpdatedBy($id)
    {
        if ($id == null) {
            $id = 2;
        }
        $user = UserProfile::find()->where(['user_id' => $id])->one();
        return $user;
    }

    public function getDichVuOnlineHasOne()
    {
        return $this->hasOne(Dep365CustomerOnlineDichVu::class, ['id' => 'id_dich_vu']);
    }
}

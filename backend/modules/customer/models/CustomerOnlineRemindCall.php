<?php

namespace backend\modules\customer\models;

use backend\models\Dep365CustomerOnlineRemindCall;
use backend\modules\log\models\CallLog;
use backend\modules\user\models\User;
use yii\behaviors\AttributeBehavior;
use yii\db\ActiveRecord;

class CustomerOnlineRemindCall extends Dep365CustomerOnlineRemindCall
{
    const DOI_LICH = 0;
    const TU_CHOI = 1;
    const SCENARIO_DOI_LICH = 'doi-lich';
    const SCENARIO_TU_CHOI = 'tu-choi';
    const SCENARIO_DOI_NHAC_LICH = 'doi-nhac-lich';
    public $reason;
    public $time_lichhen;
    public $choose = 'doi-lich';
    public $co_so;
    public $take_care;

    public function behaviors()
    {
        return array_merge([
            [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['type']
                ],
                'value' => function () {
                    return self::TYPE_CUSTOMER_ONLINE;
                }
            ],
            [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['remind_call_date'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['remind_call_date'],
                ],
                'value' => function () {
                    if ($this->remind_call_time != null) {
                        if (is_numeric($this->remind_call_time)) {
                            return strtotime(date('d-m-Y', $this->remind_call_time));
                        } else {
                            return strtotime($this->remind_call_time);
                        }
                    }
                    return null;
                }
            ],
        ], parent::behaviors());
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = \Yii::$app->cache;
        $userId = \Yii::$app->user->id;
        $keys = [
            'get-total-remind-today-menu-left-' . $userId
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        $cache = \Yii::$app->cache;
        $userId = \Yii::$app->user->id;
        $keys = [
            'get-total-remind-today-menu-left-' . $userId
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return array_merge([
            [['customer_id', 'co_so', 'status', 'status_fail', 'dat_hen_fail', 'dat_hen', 'remind_call_status'], 'integer'],
            [['note'], 'string', 'max' => 255],
            [['type'], 'string', 'max' => 50],
            [['reason_reject'], 'string'],
            [['remind_call_time', 'remind_call_date', 'reason', 'time_lichhen', 'choose'], 'safe'],
            [['remind_call_time'], 'required', 'on' => self::SCENARIO_DOI_NHAC_LICH],
            [['time_lichhen', 'co_so'], 'required', 'on' => self::SCENARIO_DOI_LICH],
            [['co_so'], 'integer', 'on' => self::SCENARIO_DOI_LICH],
            [['time_lichhen'], 'checkTimeLichHen', 'on' => self::SCENARIO_DOI_LICH],
            [['reason_reject'], 'required', 'on' => self::SCENARIO_TU_CHOI],
            [['reason_reject'], 'string', 'min' => 15, 'on' => self::SCENARIO_TU_CHOI],
            [['solution'], 'integer'],
            [['status'], 'required', 'on' => self::SCENARIO_DOI_NHAC_LICH],
            [['status_fail'], 'required', 'on' => self::SCENARIO_DOI_NHAC_LICH, 'when' => function () {
                return $this->status == Dep365CustomerOnline::STATUS_FAIL;
            }, 'whenClient' => "function(){
            }"]
        ], parent::rules());
    }

    public function attributeLabels()
    {
        return array_merge([
            'customer_id' => \Yii::t('backend', 'Khách hàng'),
            'co_so' => \Yii::t('backend', 'Cơ sở'),
            'status' => \Yii::t('backend', 'Trạng thái'),
            'status_fail' => \Yii::t('backend', 'Lý do fail'),
            'dat_hen' => \Yii::t('backend', 'Đặt hẹn'),
            'reason' => \Yii::t('backend', 'Lý do'),
            'reason_reject' => \Yii::t('backend', 'Lý do khách từ chối làm dịch vụ'),
            'time_lichhen' => \Yii::t('backend', 'Ngày giờ lịch hẹn')
        ], parent::attributeLabels());
    }

    public function checkTimeLichHen()
    {
        $customer = Dep365CustomerOnline::find()->where(['id' => $this->customer_id])->one();
        if ($customer != null) {
            if (strtotime($this->time_lichhen) < $customer->time_lichhen || strtotime($this->time_lichhen) < time()) {
                $this->addError('time_lichhen', 'Ngày giờ lịch hẹn không phù hợp');
            }
        }
    }

    public function getCallLogHasMany()
    {
        return $this->hasMany(CallLog::class, ['nhac_lich_id' => 'id']);
    }

    public static function getRemindToday()
    {
        return self::find()->where(['type' => parent::TYPE_CUSTOMER_ONLINE, 'remind_call_time' => strtotime(date('d-m-Y'))])->all();
    }

    public static function getTotalRemindToday()
    {
        $cache = \Yii::$app->cache;
        $userId = \Yii::$app->user->id;
        $key = 'get-total-remind-today-menu-left-' . $userId;

        $data = $cache->get($key);

        if ($data == false) {
            $query = self::find()
                ->where(['type' => parent::TYPE_CUSTOMER_ONLINE, 'remind_call_date' => strtotime(date('d-m-Y'))])
                ->published();
            $user = new User();
            $roleUser = $user->getRoleName($userId);
            if (!in_array($roleUser, [User::USER_ADMINISTRATOR, User::USER_DEVELOP, User::USER_MANAGER_ONLINE])) {
                $query->andWhere(['dep365_customer_online_remind_call.permission_user' => \Yii::$app->user->id]);
            }
            $data = $query->count();
            $cache->set($key, $data, 18 * 3600);
        }
        return $data;
    }
}

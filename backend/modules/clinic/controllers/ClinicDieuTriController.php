<?php

namespace backend\modules\clinic\controllers;

use backend\components\MyComponent;
use backend\models\doanhthu\ThanhToanModel;
use backend\modules\clinic\models\Clinic;
use backend\modules\clinic\models\LichDieuTri;
use backend\modules\clinic\models\PhongKhamDonHang;
use backend\modules\clinic\models\PhongKhamDonHangWThanhToan;
use backend\modules\clinic\models\PhongKhamLichDieuTriTree;
use backend\modules\setting\models\Dep365CoSo;
use backend\modules\setting\models\Setting;
use backend\modules\user\models\UserTimelineModel;
use common\models\UserProfile;
use GuzzleHttp\Client;
use Yii;
use backend\modules\clinic\models\PhongKhamLichDieuTri;
use backend\modules\clinic\models\search\PhongKhamLichDieuTriSearch;
use backend\components\MyController;
use yii\db\Transaction;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use backend\modules\user\models\User;
use yii\widgets\ActiveForm;

/**
 * ClinicDieuTriController implements the CRUD actions for PhongKhamLichDieuTri model.
 */
class ClinicDieuTriController extends MyController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $cache = Yii::$app->cache;
        $key = 'redis-clinic-dieu-tri-listener';
        $cache->delete($key);
    }

    public function actionDanhGia()
    {
        if (Yii::$app->request->isAjax) {
            $id = Yii::$app->request->post('id');
            $data = PhongKhamLichDieuTri::find()->where(['id' => $id])->one();
            Yii::$app->response->format = Response::FORMAT_JSON;
            if ($data !== null) {
                $data->danh_gia = 1;
                if ($data->save()) {
                    return ['status' => '200', 'result' => 'Hãy nói với khách hàng bắt đầu đánh giá dịch vụ.'];
                }
            }
            return ['status' => '403', 'result' => 'Lỗi rồi, xin liên hệ bộ phận kỹ thuật'];
        }
    }

    public function actionIndex()
    {
        $searchModel = new PhongKhamLichDieuTriSearch();

        $user = new User();
        $roleUser = $user->getRoleName(Yii::$app->user->id);
        $params = Yii::$app->request->queryParams;
        // Yii::warning($params);
        if ($roleUser == User::USER_TRO_THU) {
            if (empty($params['PhongKhamLichDieuTriSearch']['tro_thu'])) {
                $params['PhongKhamLichDieuTriSearch']['tro_thu'] = Yii::$app->user->id;
                $params['PhongKhamLichDieuTriSearch']['type_search_date'] = "range";
                $params['PhongKhamLichDieuTriSearch']['time_start'] = date('01-m-Y');
                $params['PhongKhamLichDieuTriSearch']['time_end'] = date('d-m-Y');
            }
        }

        if ($roleUser == User::USER_BAC_SI) {
            if (empty($params['PhongKhamLichDieuTriSearch']['ekip'])) {
                $params['PhongKhamLichDieuTriSearch']['ekip'] = Yii::$app->user->id;
                $params['PhongKhamLichDieuTriSearch']['type_search_date'] = "range";
                $params['PhongKhamLichDieuTriSearch']['time_start'] = date('01-m-Y');
                $params['PhongKhamLichDieuTriSearch']['time_end'] = date('d-m-Y');
            }
        }

        $dataProvider = $searchModel->search($params);
        $order_id = Yii::$app->request->get('order_id');
        $order = null;
        $listCoSo = ArrayHelper::map(Dep365CoSo::getCoSo(), 'id', 'name');

        if ($order_id != null) {
            $order = PhongKhamDonHang::find()->where(['id' => $order_id])->one();
            if ($order == null) {
                return $this->redirect(['/clinic/clinic-dieu-tri']);
            } else {
                $dataProvider = $searchModel->search($params, $order->order_code);
            }
        }

        if (MyComponent::hasCookies('pageSize')) {
            $dataProvider->pagination->pageSize = MyComponent::getCookies('pageSize');
        } else {
            $dataProvider->pagination->pageSize = 10;
        }

        $pageSize = $dataProvider->pagination->pageSize;

        $totalCount = $dataProvider->totalCount;

        $totalPage = (($totalCount + $pageSize - 1) / $pageSize);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'order' => $order,
            'dataProvider' => $dataProvider,
            'totalPage' => $totalPage,
            'listCoSo' => $listCoSo,
        ]);
    }

    public function actionPerpage($perpage)
    {
        MyComponent::setCookies('pageSize', $perpage);
    }

    public function actionView($id)
    {
        if (Yii::$app->request->isAjax && $this->findModel($id)) {
            return $this->renderAjax('view', [
                'model' => $this->findModel($id),
            ]);
        }
    }

    public function actionCreate($id = null)
    {
        $model = new PhongKhamLichDieuTri();

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            try {
                $model->save();
                Yii::$app->session->setFlash('alert', [
                    'body' => Yii::$app->params['create-success'],
                    'class' => 'bg-success',
                ]);
            } catch (\yii\db\Exception $exception) {
                Yii::$app->session->setFlash('alert', [
                    'body' => Yii::$app->params['create-danger'],
                    'class' => 'bg-danger',
                ]);
            }
            return $this->refresh();
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    public function actionCreateTaiKham($customer_id = null, $lich_dieu_tri_id = null)
    {
        if (Yii::$app->request->isAjax) {

            $customer = $this->findCustomer($customer_id);
            if ($customer === false) return $this->render('_error', [
                'error' => 'Không tìm thấy khách hàng'
            ]);
            $customer_name = $customer->full_name != null ? $customer->full_name : ($customer->forename != null ? $customer->forename : $customer->name);
            $lichDieuTri = $this->findModel($lich_dieu_tri_id);
            if ($lich_dieu_tri_id != null && $lichDieuTri == false) return $this->render('_error', [
                'error' => 'Không tìm thấy lịch điều trị'
            ]);
            if ($lichDieuTri == null) $lichDieuTri = PhongKhamLichDieuTri::find()->where(['customer_id' => $customer_id, 'last_dieu_tri' => PhongKhamLichDieuTri::STATUS_PUBLISHED])->one();
            if ($lichDieuTri == null || $lichDieuTri->last_dieu_tri != PhongKhamLichDieuTri::STATUS_PUBLISHED) return $this->render('_error', [
                'error' => 'Không tìm thấy lịch điều trị cuối của khách hàng ' . $customer_name
            ]);
            $model = new LichDieuTri([
                'customer_id' => $customer_id,
                'tai_kham' => $lichDieuTri->id,
                'order_code' => $lichDieuTri->order_code
            ]);
            if ($model->load(Yii::$app->request->post())) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                if ($model->validate() && $model->save()) {
                    return [
                        'code' => 200,
                        'msg' => 'Thành công'
                    ];
                } else {
                    $errors = Html::tag('p', 'Có lỗi xảy ra');
                    foreach ($model->getErrors() as $error) {
                        $errors .= Html::tag('p', is_array($error[0]) ? $error[0][0] : $error[0]);
                    }
                    return [
                        'code' => 400,
                        'msg' => $errors
                    ];
                }
            }
            return $this->renderAjax('tai_kham', [
                'customer' => $customer,
                'name' => $customer_name,
                'lichDieuTri' => $lichDieuTri,
                'model' => $model
            ]);
        }
    }

    public function actionUpdateTaiKham($id)
    {
        if (Yii::$app->request->isAjax) {
            $model = LichDieuTri::find()->where(['id' => $id])->one();
            if ($model == false || $model->tai_kham == null) return $this->renderAjax('_error', [
                'class' => 'danger',
                'error' => 'Không tìm thấy lịch tái khám'
            ]);
            $customer = $this->findCustomer($model->customer_id);
            if ($customer === false) return $this->render('_error', [
                'error' => 'Không tìm thấy khách hàng'
            ]);
            $customer_name = $customer->full_name != null ? $customer->full_name : ($customer->forename != null ? $customer->forename : $customer->name);
            $lichDieuTri = $this->findModel($model->tai_kham);
            if ($lichDieuTri == false) return $this->render('_error', [
                'error' => 'Không tìm thấy lịch điều trị'
            ]);
            if (!Yii::$app->user->can(User::USER_DEVELOP) && $model->created_by != Yii::$app->user->id) return $this->renderAjax('_error', [
                'error' => 'Không có quyền chỉnh sửa lịch tái khám'
            ]);
            if ($model->load(Yii::$app->request->post())) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                if ($model->validate() && $model->save()) {
                    return [
                        'code' => 200,
                        'msg' => 'Thành công'
                    ];
                } else {
                    $errors = Html::tag('p', 'Có lỗi xảy ra');
                    foreach ($model->getErrors() as $error) {
                        $errors .= Html::tag('p', is_array($error[0]) ? $error[0][0] : $error[0]);
                    }
                    return [
                        'code' => 400,
                        'msg' => $errors
                    ];
                }
            }
            return $this->renderAjax('tai_kham', [
                'customer' => $customer,
                'name' => $customer_name,
                'lichDieuTri' => $lichDieuTri,
                'model' => $model
            ]);
        }
    }

    public function actionValidateTaiKham($customer_id = null, $lich_dieu_tri_id = null)
    {
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $customer = $this->findCustomer($customer_id);
            if ($customer === false) return [];
            $lichDieuTri = $this->findModel($lich_dieu_tri_id);
            if ($lich_dieu_tri_id != null && $lichDieuTri == false) return [];
            if ($lichDieuTri == null) $lichDieuTri = PhongKhamLichDieuTri::find()->where(['customer_id' => $customer_id, 'last_dieu_tri' => PhongKhamLichDieuTri::STATUS_PUBLISHED])->one();
            if ($lichDieuTri == null || $lichDieuTri->last_dieu_tri != PhongKhamLichDieuTri::STATUS_PUBLISHED) return [];
            $model = new LichDieuTri([
                'customer_id' => $customer_id,
                'tai_kham' => $lichDieuTri->id,
                'order_code' => $lichDieuTri->order_code
            ]);
            if ($model->load(Yii::$app->request->post())) {
                return ActiveForm::validate($model);
            }
        }
    }

    /**
     * Updates an existing PhongKhamLichDieuTri model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        if (Yii::$app->request->isAjax) {
            $model = $this->findModel($id);

            if ($model === false) {
                return [
                    'status' => 400,
                    'mess' => 'Lịch điều trị không tồn tại.',
                ];
            }

            $customer = $this->findCustomer($model->customer_id);
            $modelOld = $model->getOldAttributes();
            $room_old = $model->getOldAttribute('room_id');
            $trothu_old = $model->getOldAttribute('tro_thu');
            $ekip_old = $model->getOldAttribute('ekip');
            if ($model->load(Yii::$app->request->post())) {
                Yii::$app->response->format = Response::FORMAT_JSON;

                try {
                    $model->time_dieu_tri = strtotime($model->time_dieu_tri);
                    $model->time_start = strtotime($model->time_start) != 0 ? strtotime($model->time_start) : null;
                    $model->time_end = strtotime($model->time_end) != 0 ? strtotime($model->time_end) : null;

                    if ($model->time_start > $model->time_end) {
                        return [
                            'status' => 403,
                            'mess' => 'Ngày bắt đầu không thể trước ngày kết thúc.',
                        ];
                    }

                    $transaction = Yii::$app->db->beginTransaction(
                        Transaction::SERIALIZABLE
                    );

                    if ($model->validate() && $model->save()) {
                        $modelNews = $model->getAttributes();
                        $room_new = $model->getAttribute('room_id');
                        $trothu_new = $model->getAttribute('tro_thu');
                        $ekip_new = $model->getAttribute('ekip');
                        if ($room_new != $room_old || $trothu_new != $trothu_old || $ekip_new != $ekip_old) {
                            $setting = Setting::find()->where(['key_value' => 'co_lich_dieu_tri_moi'])->one();
                            if ($setting != null) {
                                if (CONSOLE_HOST == false/*\Yii::$app->request->getUserIP() == '127.0.0.1'*/) {
                                    $client = new Client([
                                        'verify' => Url::to('@backend/modules/clinic/token/cacert.pem')
                                    ]);
                                } else {
                                    $client = new Client();
                                }
                                if ($model->clinicHasOne->full_name != null) {
                                    $customer = $model->clinicHasOne->full_name;
                                } elseif ($model->clinicHasOne->forename != null) {
                                    $customer = $model->clinicHasOne->forename;
                                } else {
                                    $customer = $model->clinicHasOne->name;
                                }
                                $tro_thu = '';
                                if ($model->tro_thu != null && is_array($model->tro_thu)) {
                                    foreach ($model->tro_thu as $id_tro_thu) {
                                        $profile_tro_thu = UserProfile::find()->where(['user_id' => $id_tro_thu])->one();
                                        if ($profile_tro_thu != null && !in_array($profile_tro_thu->fullname, [null, ''])) {
                                            if ($tro_thu != '') {
                                                $tro_thu .= ', ';
                                            }
                                            $tro_thu .= $profile_tro_thu->fullname;
                                        }
                                    }
                                }
                                $content = str_replace('{$customer}', $customer, $setting->value);
                                $content = str_replace('{$room}', $model->roomHasOne->fullname, $content);
                                $content = str_replace('{$docter}', $model->ekipInfoHasOne->fullname, $content);
                                $content = str_replace('{$loaidieutri}', $model->listChupHinhHasOne->name, $content);
                                $content = str_replace('{$trothu}', $tro_thu, $content);
                                $client->request('POST', 'https://api.myauris.vn/api/CreateNoti', [
                                    'verify' => false,
                                    'form_params' => [
                                        'name' => $setting->param,
                                        'content' => $content,
                                        'description' => $content,
                                        'user_id' => $room_new,
                                        'customer_id' => $model->clinicHasOne->primaryKey,
                                        'type' => 2
                                    ]
                                ]);
                            }
                        }
                        unset($modelOld['updated_at']);
                        unset($modelNews['updated_at']);
                        $user_timeline = new UserTimelineModel();
                        $user_timeline->action = [UserTimelineModel::ACTION_CAP_NHAT, UserTimelineModel::ACTION_LICH_DIEU_TRI];
                        $user_timeline->customer_id = $model->customer_id;
                        if (!$user_timeline->save()) {
                            $transaction->rollBack();
                        }
                        if ($modelNews != $modelOld) {
                            $dieuTriTree = new PhongKhamLichDieuTriTree();
                            $arr = $model->getAttributes();
                            $arr['dieu_tri_id'] = $model->getPrimaryKey();
                            unset($arr['id']);

                            foreach ($arr as $key => $item) {
                                $dieuTriTree->$key = $item;
                            }

                            if ($dieuTriTree->save()) {
                                $transaction->commit();
                                return [
                                    'status' => 200,
                                    'mess' => Yii::$app->params['update-success'],
                                ];
                            } else {
                                $transaction->rollBack();
                                return [
                                    'status' => 403,
                                    'mess' => Yii::$app->params['update-danger'],
                                ];
                            }
                        } else {
                            $transaction->commit();
                            return [
                                'status' => 200,
                                'mess' => Yii::$app->params['update-success'],
                            ];
                        }
                    }
                } catch (\yii\db\Exception $exception) {
                    $transaction->rollBack();
                    return [
                        'status' => 403,
                        'mess' => $exception->getMessage(),
                    ];
                }
            }

            return $this->renderAjax('update', [
                'model' => $model,
                'customer' => $customer,
            ]);
        }
    }

    public function actionStartTime()
    {
        if (Yii::$app->request->isAjax) {
            $id = Yii::$app->request->post('id');
            $dieutri = $this->findModel($id);
            Yii::$app->response->format = Response::FORMAT_JSON;
            if ($dieutri === false) {
                return [
                    'status' => false,
                    'result' => 'Lịch điều trị không tồn tại',
                ];
            }
            $dieutri->time_start = time();
            $dieutri->time_end = null;
            if ($dieutri->save()) {
                return [
                    'status' => true,
                    'result' => 'Bắt đầu lịch điều trị thành công.',
                ];
            } else {
                return [
                    'status' => false,
                    'result' => $dieutri->getErrors(), //'Bạn đã cập nhật thất bại.',
                ];
            }
        }
    }

    public function actionEndTime()
    {
        if (Yii::$app->request->isAjax) {
            $id = Yii::$app->request->post('id');
            $dieutri = $this->findModel($id);
            Yii::$app->response->format = Response::FORMAT_JSON;
            if ($dieutri === false) {
                return [
                    'status' => false,
                    'result' => 'Lịch điều trị không tồn tại',
                ];
            }
            if ($dieutri->time_start == null) {
                return [
                    'status' => false,
                    'result' => 'Bạn phải cập nhật thời gian bắt đầu trước.',
                ];
            }
            $dieutri->time_end = time();
            if ($dieutri->save()) {
                return [
                    'status' => true,
                    'result' => 'Kết thúc lịch điều trị thành công.',
                ];
            } else {
                return [
                    'status' => false,
                    //                    'result' => $dieutri->getErrors(),
                    'result' => 'Bạn đã cập nhật thất bại.',
                ];
            }
        }
    }

    public function actionDelete($id)
    {
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
            $model = $this->findModel($id);
            $user = new User();
            $roleName = $user->getRoleName(Yii::$app->user->id);
            if($model != null && ($roleName == User::USER_DEVELOP || (in_array($roleName, [User::USER_LE_TAN, User::USER_MANAGER_LE_TAN]) && $model->tai_kham != null))) {
                try {
                    if ($model->delete()) {
                        return [
                            "status" => "success"
                        ];
                    } else {
                        return [
                            "status" => "failure"
                        ];
                    }
                } catch (\yii\db\Exception $e) {
                    return [
                        "status" => "exception"
                    ];
                }
            }
            return [
                "status" => "failure"
            ];
        }

        return $this->redirect(['index']);
    }

    public function actionShowHide()
    {
        if (Yii::$app->request->isAjax) {
            $id = Yii::$app->request->post('id');

            $model = $this->findModel($id);
            try {
                if ($model->status == 1) {
                    $model->status = 0;
                } else {
                    $model->status = 1;
                }
                if ($model->save()) {
                    echo 1;
                }
            } catch (\yii\db\Exception $exception) {
                echo 0;
            }
        }
    }


    protected function findModel($id)
    {
        $dieuTri = PhongKhamLichDieuTri::find()->where(['id' => $id])->one();
        if ($dieuTri !== null) {
            return $dieuTri;
        }

        return false;
    }

    protected function findOrder($id)
    {
        $order = PhongKhamDonHang::find()->where(['customer_id' => $id])->one();
        if ($order !== null) {
            return $order;
        }

        return false;
    }

    protected function findCustomer($id)
    {
        $model = Clinic::findOne($id);
        if (($model !== null)) {
            return $model;
        }

        return false;
    }
}

<?php


namespace backend\components;

use backend\models\CustomerElastic;
use yii\db\ActiveRecord;
use yii\elasticsearch\Connection;
use yii\elasticsearch\Exception;

class MyModel extends ActiveRecord
{

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);

        // Do elastic stop nen tam dung cho nhe
//        $command = $this->connect();
//
//        if ($command !== false) {
//            $primaryKey = $this->primaryKey;
//            $attributes = $this->attributes;
//            $tableName = CustomerElastic::NAME_INDEX;
//            $tableType = CustomerElastic::NAME_TYPE;
//            $command->flushIndex($tableName);
//            try {
//                if ($command->exists($tableName, $tableType, $primaryKey)) {
//                    $command->update($tableName, $tableType, $primaryKey, $attributes);
//                } else {
//                    $command->insert($tableName, $tableType, $attributes, $primaryKey);
//                    $command->update($tableName, $tableType, $primaryKey, $attributes);
//                }
//                $command->flushIndex($tableName);
//
//
//                /**
//                 * can be overridden to do things after save()
//                 */
//            } catch (Exception $ex) {
//
//            }
//        }

    }

    protected function connect()
    {
        try {
            $connection = new Connection();
            $connection->open();
            $command = $connection->createCommand();
        } catch (Exception $e) {
            return false;
        }
        return $command;

    }

    public function afterDelete()
    {
        $command = $this->connect();
        if ($command !== false) {
            $primaryKey = $this->primaryKey;
            $tableName = CustomerElastic::NAME_INDEX;
            $tableType = CustomerElastic::NAME_TYPE;
            try {
                $command->delete($tableName, $tableType,$primaryKey);
                $command->flushIndex($tableName);
                // loi ko dung dc
//                $customer = CustomerElastic::findOne($primaryKey);
//                $customer->delete();
            } catch (Exception $ex) {
            }
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

}

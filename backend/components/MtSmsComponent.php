<?php

namespace backend\components;

use backend\modules\customer\models\Dep365CustomerOnline;
use backend\modules\setting\models\Setting;
use common\helpers\MyHelper;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use yii\base\Component;
use yii\helpers\StringHelper;

/**
 * Class MtSmsComponent
 * @package backend\components
 */
class MtSmsComponent extends Component
{
    const TYPE_NHAC_LICH_KHACH_HANG = 0;
    const TYPE_COUPON = 1;
    private $url = 'http://apiv2.incomsms.vn/MtService/SendSms';
    private $username;
    private $password;
    private $prefixId;
    private $commandCode;
    private $requestId = 0;
    private $msgContentTypeId = 0;
    private $feeTypeId = 0;
    private $statusCode;
    private $msgContent;
    private $error;
    public $type = self::TYPE_NHAC_LICH_KHACH_HANG;
    public $data = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $username = Setting::getKey('MTSMS_USERNAME');
        $password = Setting::getKey('MTSMS_PASSWORD');
        $prefixId = Setting::getKey('MTSMS_PREFIXID');
        $commandCode = Setting::getKey('MTSMS_COMMANDCODE');
        $this->username = $username == null ? null : $username->value;
        $this->password = $password == null ? null : $password->value;
        $this->prefixId = $prefixId == null ? null : $prefixId->value;
        $this->commandCode = $commandCode == null ? null : $commandCode->value;
    }

    /**
     * @return bool
     */
    public function sendSms(): bool
    {
        if (!$this->checkConfig()) return false;
        $phone = $this->data['phone'];
        if (substr($phone, 0, 1) == 0) $phone = '84' . substr($phone, 1);
        try {
            $client = new Client([
                'headers' => [
                    'Content-Type' => 'application/json'
                ]
            ]);
            $response = $client->request('POST', $this->url, [
                'form_params' => [
                    'Username' => $this->username,
                    'Password' => $this->password,
                    'PhoneNumber' => $phone,
                    'PrefixId' => $this->prefixId,
                    'CommandCode' => $this->commandCode,
                    'RequestId' => $this->requestId,
                    'MsgContent' => $this->getMsgContent(),
                    'MsgContentTypeId' => $this->msgContentTypeId,
                    'FeeTypeId' => $this->feeTypeId
                ]
            ]);
            if ($response->getStatusCode() !== 200) return false;
            $response = json_decode($response->getBody());
            $this->statusCode = $response->StatusCode;
            return $response->StatusCode == 1;
        } catch (GuzzleException $ex) {
            return false;
        }
    }

    /**
     * @param $msgContent
     */
    public function setMsgContent($msgContent)
    {
        $this->msgContent = $msgContent;
    }

    /**
     * @return string
     */
    public function getMsgContent(): string
    {
        if ($this->msgContent != null) return $this->msgContent;
        switch ($this->type) {
            case self::TYPE_COUPON:
                $coupon_code = $this->data['coupon_code'];
                $coupon_value = $this->data['coupon_value'];
                $coupon_expired = $this->data['coupon_expired'];
                return "Cam on ban da quan tam va su dung dich vu cua My Auris. Ma coupon cua ban: {$coupon_code}. Gia tri su dung: {$coupon_value}. Thoi han su dung: {$coupon_expired}. Moi thac mac xin vui long lien he so hotline CSKH: 0866226865";
                break;
            default:
                $sex = $this->data['sex'] == Dep365CustomerOnline::SEX_MAN ? 'anh ' : ($this->data['sex'] == Dep365CustomerOnline::SEX_WOMAN ? 'chi ' : 'quy khach ');
                $name = $sex . MyHelper::smsKhongDau(mb_convert_case($this->data['name'], MB_CASE_TITLE, "UTF-8"));
                $date = date('d-m-Y', strtotime($this->data['date']));
                $time = $this->data['time'];
                return "Chao {$name}! My AURIS da sap xep va chuan bi ekip Chuyen vien tu van nu cuoi va Bac Si kham cho anh vao luc {$time}, ngay {$date} tai: 11Bis Nguyen Gia Thieu, P6, Q3, TPHCM. Hen gap {$sex}tai My AURIS. HOTLINE: 0901.95.88.68";
        }
    }

    /**
     * @return int
     */
    public function getStatusCode(): int
    {
        if ($this->statusCode == null) return -1;
        return $this->statusCode;
    }

    /**
     * @return string
     */
    public function getMessage(int $code = null): string
    {
        $errors = [
            509 => 'Brandname chưa được khai báo',
            399 => 'MT của đối tác bị lặp',
            398 => 'Không tìm thấy đối tác',
            397 => 'Không tìm thấy nhà cung cấp',
            396 => 'Không tìm thấy phiên dịch vụ',
            395 => 'Địa chỉ IP không được đăng ký',
            394 => 'Đối tác không tìm thấy với User gửi',
            393 => 'Sai account gửi hoặc password gửi tin',
            392 => 'Không tìm thấy Telcos , số điện thoại bị sai',
            359 => 'Phiên không tồn tại hoặc chưa được kích hoạt',
            360 => 'Số điện thoại có trong danh sách từ chối nhận tin',
            357 => 'Dịch vụ không tồn tại hoặc chưa được kích hoạt',
            356 => 'Mã dịch vụ để trống',
            253 => 'Thêm mới vào bảng Concentrator bị sai',
            304 => 'MT gửi lặp;( cùng 1 nội dung gửi tới 1 số điện thoại trong thời gian ngắn)',
            511 => 'Chưa khai báo SessionPrefix',
            510 => 'Không được phép gửi MT chủ động',
            267 => 'Sai Username hoặc Password, hoặc IP không được phép gửi tin',
            515 => 'Độ dài vượt quá quy định của Telcos',
            530 => 'Từ khóa bị chặn bởi Telcos (Keyword was block by Telco)',
            535 => 'Số Điện thoại 11 số đã chuyển về 10 số',
            536 => 'Mẫu Template phải bắt đầu bằng [QC] hoặc (QC)',
            537 => 'Template chưa được khai báo',
            1 => 'Gửi thành công (Success)',
            -1 => 'Lỗi cấu hình'
        ];
        $statusCode = $code ?: $this->getStatusCode();
        if (!array_key_exists($statusCode, $errors)) {
            $statusCode = -1;
            if ($code == null) $this->statusCode = $statusCode;
        }
        return $errors[$statusCode] . ($this->error != null ? $this->error : '');
    }

    /**
     * @return bool
     */
    public function checkConfig(): bool
    {
        if ($this->msgContent != null && is_array($this->data) && isset($this->date['phone'])) return true;
        $key_data = is_array($this->data) ? array_keys($this->data) : [];
        sort($key_data);
        $error = '';
        $check = true;
        if ($key_data == []) {
            $check = false;
            $error .= 'Missing <b>data</b>. ';
        }
        switch ($this->type) {
            case self::TYPE_COUPON:
                $arr = ['phone', 'coupon_code', 'coupon_value', 'coupon_expired'];
                sort($arr);
                if ($key_data != $arr) {
                    $check = false;
                    $arr_diff = array_diff($arr, $key_data);
                    if (count($arr_diff) > 0) $error .= '<b>' . implode('</b> is missing. ', array_values($arr_diff));
                }
                if (!$this->checkDate($this->data['coupon_expired'])) {
                    $check = false;
                    $error .= '<b>coupon_expired</b> is not a date.';
                }
                break;
            default:
                $arr = ['name', 'sex', 'phone', 'date', 'time'];
                sort($arr);
                if ($key_data != $arr) {
                    $check = false;
                    $arr_diff = array_diff($arr, $key_data);
                    if (count($arr_diff) > 0) $error .= '<b>' . implode('</b> is missing. ', array_values($arr_diff));
                }
                if (!$this->checkDate($this->data['date'])) {
                    $check = false;
                    $error .= '<b>date</b> is not a date.';
                }
        }
        if (in_array(null, $this->data)) {
            $check = false;
            $arr_null = array_filter($this->data, function ($var) {
                return $var == null;
            });
            if (count($arr_null) > 0) $error .= '<b>' . implode('</b> is null. ', array_keys($arr_null));
        }
        if (!$check) {
            $this->statusCode = -1;
            $this->error = $error;
        }
        return $check;
    }

    /**
     * @param string $date
     * @return bool
     */
    private function checkDate(string $date = null): bool
    {
        if (!is_string($date)) return false;
        $strtotime = strtotime($date);
        $day = date('d', $strtotime);
        $month = date('m', $strtotime);
        $year = date('Y', $strtotime);
        return checkdate($month, $day, $year);
    }
}